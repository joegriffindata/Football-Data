{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "74da6e9a-72fa-4df6-97f7-68c16a057665",
   "metadata": {},
   "source": [
    "# IWhat Stats are Most Correlated to Success in the 2023 - 2024 Premier League Season?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ba0c4dfe",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2ad57071",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_html('https://fbref.com/en/comps/9/Premier-League-Stats')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "214d141b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#print tables from webpage. use index number to print the tables I want to extract and analyze data from"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6e0ffe1e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#want tables with index 0, 2 and 3\n",
    "table_index = 0\n",
    "table_index_for = 2\n",
    "table_index_against = 3\n",
    "df_table = df[table_index]\n",
    "df_standard_for = df[table_index_for]\n",
    "df_standard_against = df[table_index_against]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b577e228",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0_level_0</th>\n",
       "      <th>Unnamed: 1_level_0</th>\n",
       "      <th>Unnamed: 2_level_0</th>\n",
       "      <th>Unnamed: 3_level_0</th>\n",
       "      <th colspan=\"4\" halign=\"left\">Playing Time</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Performance</th>\n",
       "      <th>...</th>\n",
       "      <th colspan=\"10\" halign=\"left\">Per 90 Minutes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th># Pl</th>\n",
       "      <th>Age</th>\n",
       "      <th>Poss</th>\n",
       "      <th>MP</th>\n",
       "      <th>Starts</th>\n",
       "      <th>Min</th>\n",
       "      <th>90s</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>...</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xG+xAG</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>23</td>\n",
       "      <td>26.4</td>\n",
       "      <td>50.1</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>16</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>1.6</td>\n",
       "      <td>1.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.6</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.17</td>\n",
       "      <td>2.72</td>\n",
       "      <td>1.55</td>\n",
       "      <td>2.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aston Villa</td>\n",
       "      <td>21</td>\n",
       "      <td>27.2</td>\n",
       "      <td>51.9</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>16</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>1.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1.19</td>\n",
       "      <td>2.69</td>\n",
       "      <td>1.50</td>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>23</td>\n",
       "      <td>25.8</td>\n",
       "      <td>43.8</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>1.62</td>\n",
       "      <td>1.19</td>\n",
       "      <td>2.82</td>\n",
       "      <td>1.47</td>\n",
       "      <td>2.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brentford</td>\n",
       "      <td>20</td>\n",
       "      <td>26.4</td>\n",
       "      <td>46.7</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>19</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1.1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.7</td>\n",
       "      <td>2.8</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.10</td>\n",
       "      <td>2.78</td>\n",
       "      <td>1.51</td>\n",
       "      <td>2.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Brighton</td>\n",
       "      <td>27</td>\n",
       "      <td>26.1</td>\n",
       "      <td>55.2</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>17</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>1.7</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.7</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.42</td>\n",
       "      <td>0.97</td>\n",
       "      <td>2.38</td>\n",
       "      <td>1.42</td>\n",
       "      <td>2.38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Unnamed: 0_level_0 Unnamed: 1_level_0 Unnamed: 2_level_0 Unnamed: 3_level_0  \\\n",
       "               Squad               # Pl                Age               Poss   \n",
       "0            Arsenal                 23               26.4               50.1   \n",
       "1        Aston Villa                 21               27.2               51.9   \n",
       "2        Bournemouth                 23               25.8               43.8   \n",
       "3          Brentford                 20               26.4               46.7   \n",
       "4           Brighton                 27               26.1               55.2   \n",
       "\n",
       "  Playing Time                   Performance      ... Per 90 Minutes       \\\n",
       "            MP Starts  Min   90s         Gls Ast  ...            Gls  Ast   \n",
       "0           10    110  900  10.0          16  13  ...            1.6  1.3   \n",
       "1           10    110  900  10.0          16  14  ...            1.6  1.4   \n",
       "2           10    110  900  10.0          13  11  ...            1.3  1.1   \n",
       "3           10    110  900  10.0          19  11  ...            1.9  1.1   \n",
       "4           10    110  900  10.0          17  12  ...            1.7  1.2   \n",
       "\n",
       "                                                      \n",
       "   G+A G-PK G+A-PK    xG   xAG xG+xAG  npxG npxG+xAG  \n",
       "0  2.9  1.6    2.9  1.55  1.17   2.72  1.55     2.72  \n",
       "1  3.0  1.6    3.0  1.50  1.19   2.69  1.50     2.69  \n",
       "2  2.4  1.2    2.3  1.62  1.19   2.82  1.47     2.66  \n",
       "3  3.0  1.7    2.8  1.67  1.10   2.78  1.51     2.62  \n",
       "4  2.9  1.7    2.9  1.42  0.97   2.38  1.42     2.38  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_standard_for.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fcce9c90",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultiIndex([('Unnamed: 0_level_0',    'Squad'),\n",
       "            ('Unnamed: 1_level_0',     '# Pl'),\n",
       "            ('Unnamed: 2_level_0',      'Age'),\n",
       "            ('Unnamed: 3_level_0',     'Poss'),\n",
       "            (      'Playing Time',       'MP'),\n",
       "            (      'Playing Time',   'Starts'),\n",
       "            (      'Playing Time',      'Min'),\n",
       "            (      'Playing Time',      '90s'),\n",
       "            (       'Performance',      'Gls'),\n",
       "            (       'Performance',      'Ast'),\n",
       "            (       'Performance',      'G+A'),\n",
       "            (       'Performance',     'G-PK'),\n",
       "            (       'Performance',       'PK'),\n",
       "            (       'Performance',    'PKatt'),\n",
       "            (       'Performance',     'CrdY'),\n",
       "            (       'Performance',     'CrdR'),\n",
       "            (          'Expected',       'xG'),\n",
       "            (          'Expected',     'npxG'),\n",
       "            (          'Expected',      'xAG'),\n",
       "            (          'Expected', 'npxG+xAG'),\n",
       "            (       'Progression',     'PrgC'),\n",
       "            (       'Progression',     'PrgP'),\n",
       "            (    'Per 90 Minutes',      'Gls'),\n",
       "            (    'Per 90 Minutes',      'Ast'),\n",
       "            (    'Per 90 Minutes',      'G+A'),\n",
       "            (    'Per 90 Minutes',     'G-PK'),\n",
       "            (    'Per 90 Minutes',   'G+A-PK'),\n",
       "            (    'Per 90 Minutes',       'xG'),\n",
       "            (    'Per 90 Minutes',      'xAG'),\n",
       "            (    'Per 90 Minutes',   'xG+xAG'),\n",
       "            (    'Per 90 Minutes',     'npxG'),\n",
       "            (    'Per 90 Minutes', 'npxG+xAG')],\n",
       "           )"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_standard_for.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1fcd21a2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', '# Pl', 'Age', 'Poss', 'MP', 'Starts', 'Min', '90s', 'Gls',\n",
       "       'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG',\n",
       "       'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'Gls', 'Ast', 'G+A', 'G-PK',\n",
       "       'G+A-PK', 'xG', 'xAG', 'xG+xAG', 'npxG', 'npxG+xAG'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check the number of levels in the MultiIndex columns\n",
    "num_levels = df_standard_for.columns.nlevels\n",
    "if num_levels > 1:\n",
    "    df_standard_for.columns = df_standard_for.columns.droplevel(0)\n",
    "\n",
    "#view column names\n",
    "df_standard_for.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4a666f5d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', '# Pl', 'Age', 'Poss', 'MP', 'Starts', 'Min', '90s', 'Gls',\n",
       "       'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG',\n",
       "       'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'Gls', 'Ast', 'G+A', 'G-PK',\n",
       "       'G+A-PK', 'xG', 'xAG', 'xG+xAG', 'npxG', 'npxG+xAG'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check the number of levels in the MultiIndex columns\n",
    "num_levels = df_standard_against.columns.nlevels\n",
    "if num_levels > 1:\n",
    "    df_standard_against.columns = df_standard_against.columns.droplevel(0)\n",
    "\n",
    "#view column names\n",
    "df_standard_against.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ac29cf72",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th># Pl</th>\n",
       "      <th>Age</th>\n",
       "      <th>Poss</th>\n",
       "      <th>MP</th>\n",
       "      <th>Starts</th>\n",
       "      <th>Min</th>\n",
       "      <th>90s</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>...</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xG+xAG</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>vs Arsenal</td>\n",
       "      <td>23</td>\n",
       "      <td>26.4</td>\n",
       "      <td>49.9</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>11</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.04</td>\n",
       "      <td>0.68</td>\n",
       "      <td>1.72</td>\n",
       "      <td>0.96</td>\n",
       "      <td>1.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>vs Aston Villa</td>\n",
       "      <td>21</td>\n",
       "      <td>27.1</td>\n",
       "      <td>48.1</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.13</td>\n",
       "      <td>0.80</td>\n",
       "      <td>1.93</td>\n",
       "      <td>0.97</td>\n",
       "      <td>1.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>vs Bournemouth</td>\n",
       "      <td>23</td>\n",
       "      <td>27.0</td>\n",
       "      <td>56.2</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1.29</td>\n",
       "      <td>1.02</td>\n",
       "      <td>2.31</td>\n",
       "      <td>1.29</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>vs Brentford</td>\n",
       "      <td>20</td>\n",
       "      <td>27.4</td>\n",
       "      <td>53.3</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>19</td>\n",
       "      <td>17</td>\n",
       "      <td>...</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1.7</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.9</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.31</td>\n",
       "      <td>2.99</td>\n",
       "      <td>1.67</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>vs Brighton</td>\n",
       "      <td>27</td>\n",
       "      <td>26.6</td>\n",
       "      <td>44.8</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1.62</td>\n",
       "      <td>1.31</td>\n",
       "      <td>2.94</td>\n",
       "      <td>1.47</td>\n",
       "      <td>2.78</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Squad  # Pl   Age  Poss  MP  Starts  Min   90s  Gls  Ast  ...  \\\n",
       "0      vs Arsenal    23  26.4  49.9  10     110  900  10.0   11    8  ...   \n",
       "1  vs Aston Villa    21  27.1  48.1  10     110  900  10.0   15   10  ...   \n",
       "2  vs Bournemouth    23  27.0  56.2  10     110  900  10.0   12   10  ...   \n",
       "3    vs Brentford    20  27.4  53.3  10     110  900  10.0   19   17  ...   \n",
       "4     vs Brighton    27  26.6  44.8  10     110  900  10.0   14   10  ...   \n",
       "\n",
       "   Gls  Ast  G+A  G-PK  G+A-PK    xG   xAG  xG+xAG  npxG  npxG+xAG  \n",
       "0  1.1  0.8  1.9   1.0     1.8  1.04  0.68    1.72  0.96      1.64  \n",
       "1  1.5  1.0  2.5   1.4     2.4  1.13  0.80    1.93  0.97      1.77  \n",
       "2  1.2  1.0  2.2   1.2     2.2  1.29  1.02    2.31  1.29      2.31  \n",
       "3  1.9  1.7  3.6   1.9     3.6  1.67  1.31    2.99  1.67      2.99  \n",
       "4  1.4  1.0  2.4   1.2     2.2  1.62  1.31    2.94  1.47      2.78  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#dataframe with first index of columns removed\n",
    "df_standard_against.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "41b5cbcf-9a6d-4974-80f6-ccdbb7ef2bcf",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rk</th>\n",
       "      <th>Squad</th>\n",
       "      <th>MP</th>\n",
       "      <th>W</th>\n",
       "      <th>D</th>\n",
       "      <th>L</th>\n",
       "      <th>GF</th>\n",
       "      <th>GA</th>\n",
       "      <th>GD</th>\n",
       "      <th>Pts</th>\n",
       "      <th>Pts/MP</th>\n",
       "      <th>xG</th>\n",
       "      <th>xGA</th>\n",
       "      <th>xGD</th>\n",
       "      <th>xGD/90</th>\n",
       "      <th>Last 5</th>\n",
       "      <th>Attendance</th>\n",
       "      <th>Top Team Scorer</th>\n",
       "      <th>Goalkeeper</th>\n",
       "      <th>Notes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Liverpool</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>18.1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>W W W D W</td>\n",
       "      <td>60263</td>\n",
       "      <td>Mohamed Salah - 7</td>\n",
       "      <td>Alisson</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Manchester City</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>23</td>\n",
       "      <td>2.3</td>\n",
       "      <td>19.9</td>\n",
       "      <td>10.8</td>\n",
       "      <td>9.1</td>\n",
       "      <td>0.91</td>\n",
       "      <td>D W W W L</td>\n",
       "      <td>52800</td>\n",
       "      <td>Erling Haaland - 11</td>\n",
       "      <td>Ederson</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Nott'ham Forest</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>13.6</td>\n",
       "      <td>9.5</td>\n",
       "      <td>4.1</td>\n",
       "      <td>0.41</td>\n",
       "      <td>L D W W W</td>\n",
       "      <td>29875</td>\n",
       "      <td>Chris Wood - 8</td>\n",
       "      <td>Matz Sels</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Chelsea</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>12</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>1.8</td>\n",
       "      <td>18.1</td>\n",
       "      <td>13.5</td>\n",
       "      <td>4.6</td>\n",
       "      <td>0.46</td>\n",
       "      <td>W D L W D</td>\n",
       "      <td>39528</td>\n",
       "      <td>Cole Palmer - 7</td>\n",
       "      <td>Robert SÃ¡nchez</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Arsenal</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>18</td>\n",
       "      <td>1.8</td>\n",
       "      <td>15.5</td>\n",
       "      <td>10.4</td>\n",
       "      <td>5.1</td>\n",
       "      <td>0.51</td>\n",
       "      <td>W W L D L</td>\n",
       "      <td>60320</td>\n",
       "      <td>Kai Havertz - 4</td>\n",
       "      <td>David Raya</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rk            Squad  MP  W  D  L  GF  GA  GD  Pts  Pts/MP    xG   xGA  \\\n",
       "0   1        Liverpool  10  8  1  1  19   6  13   25     2.5  18.1   8.0   \n",
       "1   2  Manchester City  10  7  2  1  21  11  10   23     2.3  19.9  10.8   \n",
       "2   3  Nott'ham Forest  10  5  4  1  14   7   7   19     1.9  13.6   9.5   \n",
       "3   4          Chelsea  10  5  3  2  20  12   8   18     1.8  18.1  13.5   \n",
       "4   5          Arsenal  10  5  3  2  17  11   6   18     1.8  15.5  10.4   \n",
       "\n",
       "    xGD  xGD/90     Last 5  Attendance      Top Team Scorer      Goalkeeper  \\\n",
       "0  10.0    1.00  W W W D W       60263    Mohamed Salah - 7         Alisson   \n",
       "1   9.1    0.91  D W W W L       52800  Erling Haaland - 11         Ederson   \n",
       "2   4.1    0.41  L D W W W       29875       Chris Wood - 8       Matz Sels   \n",
       "3   4.6    0.46  W D L W D       39528      Cole Palmer - 7  Robert SÃ¡nchez   \n",
       "4   5.1    0.51  W W L D L       60320      Kai Havertz - 4      David Raya   \n",
       "\n",
       "   Notes  \n",
       "0    NaN  \n",
       "1    NaN  \n",
       "2    NaN  \n",
       "3    NaN  \n",
       "4    NaN  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_table.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f16c026c-2c1d-43cc-a920-57ffe2effbd2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#drop unwanted columns\n",
    "#create per 90 stats for things like goals, assists, etc.\n",
    "#correlation testing\n",
    "#match teams up for next GW"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3dd33b59-84fd-4a56-95d9-6c3cf9747f43",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Rk', 'Squad', 'MP', 'W', 'D', 'L', 'GF', 'GA', 'GD', 'Pts', 'Pts/MP',\n",
       "       'xG', 'xGA', 'xGD', 'xGD/90', 'Last 5', 'Attendance', 'Top Team Scorer',\n",
       "       'Goalkeeper', 'Notes'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_table.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "663cd8ef-c474-4a95-8f97-7dbc29d13244",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', '# Pl', 'Age', 'Poss', 'MP', 'Starts', 'Min', '90s', 'Gls',\n",
       "       'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG',\n",
       "       'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'Gls', 'Ast', 'G+A', 'G-PK',\n",
       "       'G+A-PK', 'xG', 'xAG', 'xG+xAG', 'npxG', 'npxG+xAG'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_standard_for.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9cf92ea7-3948-4b7f-866d-0f4b2a65e48d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', '# Pl', 'Age', 'Poss', 'MP', 'Starts', 'Min', '90s', 'Gls',\n",
       "       'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG',\n",
       "       'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'Gls', 'Ast', 'G+A', 'G-PK',\n",
       "       'G+A-PK', 'xG', 'xAG', 'xG+xAG', 'npxG', 'npxG+xAG'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_standard_against.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0aa5340d-f4d6-4216-9d04-b5e2dce6f577",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#create new dataframes with only the columns we want to use\n",
    "selected_table = df_table[['Rk', 'Squad', 'MP', 'W', 'D', 'L', 'GF', 'GA', 'GD', 'Pts', 'Pts/MP',\n",
    "       'xG', 'xGA', 'xGD', 'xGD/90']]\n",
    "selected_for = df_standard_for[['Squad', 'Poss', 'Gls', 'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG', 'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'G+A-PK', 'xG+xAG']]\n",
    "selected_against = df_standard_against[['Squad', 'Poss', 'Gls', 'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG', 'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'G+A-PK', 'xG+xAG']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "31a44d8d-ad36-48ef-8866-fbae5d75a591",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rk</th>\n",
       "      <th>Squad</th>\n",
       "      <th>MP</th>\n",
       "      <th>W</th>\n",
       "      <th>D</th>\n",
       "      <th>L</th>\n",
       "      <th>GF</th>\n",
       "      <th>GA</th>\n",
       "      <th>GD</th>\n",
       "      <th>Pts</th>\n",
       "      <th>Pts/MP</th>\n",
       "      <th>xG</th>\n",
       "      <th>xGA</th>\n",
       "      <th>xGD</th>\n",
       "      <th>xGD/90</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Liverpool</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>18.1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Manchester City</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>23</td>\n",
       "      <td>2.3</td>\n",
       "      <td>19.9</td>\n",
       "      <td>10.8</td>\n",
       "      <td>9.1</td>\n",
       "      <td>0.91</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rk            Squad  MP  W  D  L  GF  GA  GD  Pts  Pts/MP    xG   xGA  \\\n",
       "0   1        Liverpool  10  8  1  1  19   6  13   25     2.5  18.1   8.0   \n",
       "1   2  Manchester City  10  7  2  1  21  11  10   23     2.3  19.9  10.8   \n",
       "\n",
       "    xGD  xGD/90  \n",
       "0  10.0    1.00  \n",
       "1   9.1    0.91  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_table.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2c358780-6475-40f1-87ba-ce37d2152bf0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>...</td>\n",
       "      <td>15.5</td>\n",
       "      <td>1.55</td>\n",
       "      <td>11.7</td>\n",
       "      <td>1.17</td>\n",
       "      <td>27.2</td>\n",
       "      <td>2.72</td>\n",
       "      <td>192</td>\n",
       "      <td>413</td>\n",
       "      <td>2.9</td>\n",
       "      <td>2.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aston Villa</td>\n",
       "      <td>51.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>30</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>11.9</td>\n",
       "      <td>1.19</td>\n",
       "      <td>26.9</td>\n",
       "      <td>2.69</td>\n",
       "      <td>184</td>\n",
       "      <td>340</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Squad  Poss  Gls  Gls  Ast  Ast  G+A  G+A  G-PK  G-PK  ...  npxG  \\\n",
       "0      Arsenal  50.1   16  1.6   13  1.3   29  2.9    16   1.6  ...  15.5   \n",
       "1  Aston Villa  51.9   16  1.6   14  1.4   30  3.0    16   1.6  ...  15.0   \n",
       "\n",
       "   npxG   xAG   xAG  npxG+xAG  npxG+xAG  PrgC  PrgP  G+A-PK  xG+xAG  \n",
       "0  1.55  11.7  1.17      27.2      2.72   192   413     2.9    2.72  \n",
       "1  1.50  11.9  1.19      26.9      2.69   184   340     3.0    2.69  \n",
       "\n",
       "[2 rows x 26 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_for.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "da59c702-cce6-4558-8616-31f3315ae5d0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>vs Arsenal</td>\n",
       "      <td>49.9</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.8</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>vs Aston Villa</td>\n",
       "      <td>48.1</td>\n",
       "      <td>15</td>\n",
       "      <td>1.5</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>...</td>\n",
       "      <td>9.7</td>\n",
       "      <td>0.97</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.80</td>\n",
       "      <td>17.7</td>\n",
       "      <td>1.77</td>\n",
       "      <td>170</td>\n",
       "      <td>314</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.93</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Squad  Poss  Gls  Gls  Ast  Ast  G+A  G+A  G-PK  G-PK  ...  npxG  \\\n",
       "0      vs Arsenal  49.9   11  1.1    8  0.8   19  1.9    10   1.0  ...   9.6   \n",
       "1  vs Aston Villa  48.1   15  1.5   10  1.0   25  2.5    14   1.4  ...   9.7   \n",
       "\n",
       "   npxG  xAG   xAG  npxG+xAG  npxG+xAG  PrgC  PrgP  G+A-PK  xG+xAG  \n",
       "0  0.96  6.8  0.68      16.4      1.64   213   317     1.8    1.72  \n",
       "1  0.97  8.0  0.80      17.7      1.77   170   314     2.4    1.93  \n",
       "\n",
       "[2 rows x 26 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_against.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fb3f9e7f-3131-49c6-938e-61367989fe69",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/jp/3fktnqd5023f4kfkp0wgrq4w0000gn/T/ipykernel_4604/4147698335.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  selected_against['Squad'] = selected_for['Squad'].str.replace('vs ', '', regex = False)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>49.9</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.8</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aston Villa</td>\n",
       "      <td>48.1</td>\n",
       "      <td>15</td>\n",
       "      <td>1.5</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>...</td>\n",
       "      <td>9.7</td>\n",
       "      <td>0.97</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.80</td>\n",
       "      <td>17.7</td>\n",
       "      <td>1.77</td>\n",
       "      <td>170</td>\n",
       "      <td>314</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>56.2</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>22</td>\n",
       "      <td>2.2</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>...</td>\n",
       "      <td>12.9</td>\n",
       "      <td>1.29</td>\n",
       "      <td>10.2</td>\n",
       "      <td>1.02</td>\n",
       "      <td>23.1</td>\n",
       "      <td>2.31</td>\n",
       "      <td>191</td>\n",
       "      <td>359</td>\n",
       "      <td>2.2</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brentford</td>\n",
       "      <td>53.3</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>17</td>\n",
       "      <td>1.7</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>...</td>\n",
       "      <td>16.7</td>\n",
       "      <td>1.67</td>\n",
       "      <td>13.1</td>\n",
       "      <td>1.31</td>\n",
       "      <td>29.9</td>\n",
       "      <td>2.99</td>\n",
       "      <td>228</td>\n",
       "      <td>463</td>\n",
       "      <td>3.6</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Brighton</td>\n",
       "      <td>44.8</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>24</td>\n",
       "      <td>2.4</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>...</td>\n",
       "      <td>14.7</td>\n",
       "      <td>1.47</td>\n",
       "      <td>13.1</td>\n",
       "      <td>1.31</td>\n",
       "      <td>27.8</td>\n",
       "      <td>2.78</td>\n",
       "      <td>156</td>\n",
       "      <td>307</td>\n",
       "      <td>2.2</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Squad  Poss  Gls  Gls  Ast  Ast  G+A  G+A  G-PK  G-PK  ...  npxG  \\\n",
       "0      Arsenal  49.9   11  1.1    8  0.8   19  1.9    10   1.0  ...   9.6   \n",
       "1  Aston Villa  48.1   15  1.5   10  1.0   25  2.5    14   1.4  ...   9.7   \n",
       "2  Bournemouth  56.2   12  1.2   10  1.0   22  2.2    12   1.2  ...  12.9   \n",
       "3    Brentford  53.3   19  1.9   17  1.7   36  3.6    19   1.9  ...  16.7   \n",
       "4     Brighton  44.8   14  1.4   10  1.0   24  2.4    12   1.2  ...  14.7   \n",
       "\n",
       "   npxG   xAG   xAG  npxG+xAG  npxG+xAG  PrgC  PrgP  G+A-PK  xG+xAG  \n",
       "0  0.96   6.8  0.68      16.4      1.64   213   317     1.8    1.72  \n",
       "1  0.97   8.0  0.80      17.7      1.77   170   314     2.4    1.93  \n",
       "2  1.29  10.2  1.02      23.1      2.31   191   359     2.2    2.31  \n",
       "3  1.67  13.1  1.31      29.9      2.99   228   463     3.6    2.99  \n",
       "4  1.47  13.1  1.31      27.8      2.78   156   307     2.2    2.94  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#remove \"vs \" from stats against to normalize 'Squad' across the dataframes\n",
    "selected_against['Squad'] = selected_for['Squad'].str.replace('vs ', '', regex = False)\n",
    "selected_against.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4318e82c-afbe-47a2-a2a3-7a55fc095f9c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', 'Poss', 'Gls', 'Gls', 'Ast', 'Ast', 'G+A', 'G+A', 'G-PK',\n",
       "       'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'xG', 'npxG', 'npxG',\n",
       "       'xAG', 'xAG', 'npxG+xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'G+A-PK',\n",
       "       'xG+xAG'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_for.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1f82f42a-a74e-4f8b-b1ed-7ae31ddc0896",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index: 0, Column Name: Squad\n",
      "Index: 1, Column Name: Poss\n",
      "Index: 2, Column Name: Gls\n",
      "Index: 3, Column Name: Gls\n",
      "Index: 4, Column Name: Ast\n",
      "Index: 5, Column Name: Ast\n",
      "Index: 6, Column Name: G+A\n",
      "Index: 7, Column Name: G+A\n",
      "Index: 8, Column Name: G-PK\n",
      "Index: 9, Column Name: G-PK\n",
      "Index: 10, Column Name: PK\n",
      "Index: 11, Column Name: PKatt\n",
      "Index: 12, Column Name: CrdY\n",
      "Index: 13, Column Name: CrdR\n",
      "Index: 14, Column Name: xG\n",
      "Index: 15, Column Name: xG\n",
      "Index: 16, Column Name: npxG\n",
      "Index: 17, Column Name: npxG\n",
      "Index: 18, Column Name: xAG\n",
      "Index: 19, Column Name: xAG\n",
      "Index: 20, Column Name: npxG+xAG\n",
      "Index: 21, Column Name: npxG+xAG\n",
      "Index: 22, Column Name: PrgC\n",
      "Index: 23, Column Name: PrgP\n",
      "Index: 24, Column Name: G+A-PK\n",
      "Index: 25, Column Name: xG+xAG\n"
     ]
    }
   ],
   "source": [
    "for index, column_name in enumerate(selected_for.columns):\n",
    "    print(f\"Index: {index}, Column Name: {column_name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d92d1591-994a-4677-a1bd-d08ce869bfa3",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#change goals - penalties with non penalty goals\n",
    "new_col_for = {\n",
    "    'G-PK': 'npG',\n",
    "}\n",
    "# Rename the columns\n",
    "selected_for = selected_for.rename(columns=new_col_for)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e975f4d1-279d-4ec2-88fa-23d9331e64a3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls/90</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast/90</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A/90</th>\n",
       "      <th>npG</th>\n",
       "      <th>npG/90</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG/90</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG/90</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG/90</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>...</td>\n",
       "      <td>15.5</td>\n",
       "      <td>1.55</td>\n",
       "      <td>11.7</td>\n",
       "      <td>1.17</td>\n",
       "      <td>27.2</td>\n",
       "      <td>2.72</td>\n",
       "      <td>192</td>\n",
       "      <td>413</td>\n",
       "      <td>2.9</td>\n",
       "      <td>2.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aston Villa</td>\n",
       "      <td>51.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>30</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>11.9</td>\n",
       "      <td>1.19</td>\n",
       "      <td>26.9</td>\n",
       "      <td>2.69</td>\n",
       "      <td>184</td>\n",
       "      <td>340</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>43.8</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>24</td>\n",
       "      <td>2.4</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>...</td>\n",
       "      <td>14.7</td>\n",
       "      <td>1.47</td>\n",
       "      <td>11.9</td>\n",
       "      <td>1.19</td>\n",
       "      <td>26.6</td>\n",
       "      <td>2.66</td>\n",
       "      <td>184</td>\n",
       "      <td>388</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brentford</td>\n",
       "      <td>46.7</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>30</td>\n",
       "      <td>3.0</td>\n",
       "      <td>17</td>\n",
       "      <td>1.7</td>\n",
       "      <td>...</td>\n",
       "      <td>15.1</td>\n",
       "      <td>1.51</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.10</td>\n",
       "      <td>26.2</td>\n",
       "      <td>2.62</td>\n",
       "      <td>147</td>\n",
       "      <td>347</td>\n",
       "      <td>2.8</td>\n",
       "      <td>2.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Brighton</td>\n",
       "      <td>55.2</td>\n",
       "      <td>17</td>\n",
       "      <td>1.7</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>17</td>\n",
       "      <td>1.7</td>\n",
       "      <td>...</td>\n",
       "      <td>14.2</td>\n",
       "      <td>1.42</td>\n",
       "      <td>9.7</td>\n",
       "      <td>0.97</td>\n",
       "      <td>23.8</td>\n",
       "      <td>2.38</td>\n",
       "      <td>215</td>\n",
       "      <td>470</td>\n",
       "      <td>2.9</td>\n",
       "      <td>2.38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Squad  Poss  Gls  Gls/90  Ast  Ast/90  G+A  G+A/90  npG  npG/90  ...  \\\n",
       "0      Arsenal  50.1   16     1.6   13     1.3   29     2.9   16     1.6  ...   \n",
       "1  Aston Villa  51.9   16     1.6   14     1.4   30     3.0   16     1.6  ...   \n",
       "2  Bournemouth  43.8   13     1.3   11     1.1   24     2.4   12     1.2  ...   \n",
       "3    Brentford  46.7   19     1.9   11     1.1   30     3.0   17     1.7  ...   \n",
       "4     Brighton  55.2   17     1.7   12     1.2   29     2.9   17     1.7  ...   \n",
       "\n",
       "   npxG  npxG/90   xAG  xAG/90  npxG+xAG  npxG+xAG/90  PrgC  PrgP  G+A-PK  \\\n",
       "0  15.5     1.55  11.7    1.17      27.2         2.72   192   413     2.9   \n",
       "1  15.0     1.50  11.9    1.19      26.9         2.69   184   340     3.0   \n",
       "2  14.7     1.47  11.9    1.19      26.6         2.66   184   388     2.3   \n",
       "3  15.1     1.51  11.0    1.10      26.2         2.62   147   347     2.8   \n",
       "4  14.2     1.42   9.7    0.97      23.8         2.38   215   470     2.9   \n",
       "\n",
       "   xG+xAG  \n",
       "0    2.72  \n",
       "1    2.69  \n",
       "2    2.82  \n",
       "3    2.78  \n",
       "4    2.38  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#function to change the duplicate column names so that they are per 90\n",
    "def rename_columns_with_suffix(selected_for):\n",
    "    new_columns = []  # Initialize a list to store new column names\n",
    "    seen_columns = set()  # Initialize a set to keep track of seen column names\n",
    "    for col_index, column_name in enumerate(selected_for.columns):\n",
    "        # Check if the column name is already in the set of seen column names\n",
    "        if column_name in seen_columns:\n",
    "            # If yes, add a suffix to the column name\n",
    "            new_column_name = f'{column_name}/90'\n",
    "        else:\n",
    "            # If no, keep the original column name\n",
    "            new_column_name = column_name\n",
    "        new_columns.append(new_column_name)  # Add the new column name to the list\n",
    "        seen_columns.add(column_name)  # Add the column name to the set of seen column names\n",
    "    selected_for.columns = new_columns  # Assign the new column names to the DataFrame\n",
    "\n",
    "# Rename columns with suffixes\n",
    "rename_columns_with_suffix(selected_for)\n",
    "\n",
    "selected_for.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "579ffa4f-ca12-407d-8d99-38bc417c2efc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index: 0, Column Name: Squad\n",
      "Index: 1, Column Name: Poss\n",
      "Index: 2, Column Name: Gls\n",
      "Index: 3, Column Name: Gls/90\n",
      "Index: 4, Column Name: Ast\n",
      "Index: 5, Column Name: Ast/90\n",
      "Index: 6, Column Name: G+A\n",
      "Index: 7, Column Name: G+A/90\n",
      "Index: 8, Column Name: npG\n",
      "Index: 9, Column Name: npG/90\n",
      "Index: 10, Column Name: PK\n",
      "Index: 11, Column Name: PKatt\n",
      "Index: 12, Column Name: CrdY\n",
      "Index: 13, Column Name: CrdR\n",
      "Index: 14, Column Name: xG\n",
      "Index: 15, Column Name: xG/90\n",
      "Index: 16, Column Name: npxG\n",
      "Index: 17, Column Name: npxG/90\n",
      "Index: 18, Column Name: xAG\n",
      "Index: 19, Column Name: xAG/90\n",
      "Index: 20, Column Name: npxG+xAG\n",
      "Index: 21, Column Name: npxG+xAG/90\n",
      "Index: 22, Column Name: PrgC\n",
      "Index: 23, Column Name: PrgP\n",
      "Index: 24, Column Name: G+A-PK\n",
      "Index: 25, Column Name: xG+xAG\n"
     ]
    }
   ],
   "source": [
    "for index, column_name in enumerate(selected_for.columns):\n",
    "    print(f\"Index: {index}, Column Name: {column_name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "61817230-4c53-4727-9623-4bc72484a9a0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index: 0, Column Name: Squad\n",
      "Index: 1, Column Name: Poss\n",
      "Index: 2, Column Name: Gls\n",
      "Index: 3, Column Name: Gls\n",
      "Index: 4, Column Name: Ast\n",
      "Index: 5, Column Name: Ast\n",
      "Index: 6, Column Name: G+A\n",
      "Index: 7, Column Name: G+A\n",
      "Index: 8, Column Name: G-PK\n",
      "Index: 9, Column Name: G-PK\n",
      "Index: 10, Column Name: PK\n",
      "Index: 11, Column Name: PKatt\n",
      "Index: 12, Column Name: CrdY\n",
      "Index: 13, Column Name: CrdR\n",
      "Index: 14, Column Name: xG\n",
      "Index: 15, Column Name: xG\n",
      "Index: 16, Column Name: npxG\n",
      "Index: 17, Column Name: npxG\n",
      "Index: 18, Column Name: xAG\n",
      "Index: 19, Column Name: xAG\n",
      "Index: 20, Column Name: npxG+xAG\n",
      "Index: 21, Column Name: npxG+xAG\n",
      "Index: 22, Column Name: PrgC\n",
      "Index: 23, Column Name: PrgP\n",
      "Index: 24, Column Name: G+A-PK\n",
      "Index: 25, Column Name: xG+xAG\n"
     ]
    }
   ],
   "source": [
    "for index, column_name in enumerate(selected_against.columns):\n",
    "    print(f\"Index: {index}, Column Name: {column_name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7feee306-94a6-4374-b7c1-bfd32d6e1705",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#change goals - penalties with non penalty goals\n",
    "new_col_against = {\n",
    "    'G-PK': 'npG',\n",
    "}\n",
    "# Rename the columns\n",
    "selected_against = selected_against.rename(columns=new_col_against)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d8e8bcb0-1cce-46c8-b24e-fb6e507aa08c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls/90</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast/90</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A/90</th>\n",
       "      <th>npG</th>\n",
       "      <th>npG/90</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG/90</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG/90</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG/90</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>49.9</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.8</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aston Villa</td>\n",
       "      <td>48.1</td>\n",
       "      <td>15</td>\n",
       "      <td>1.5</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>...</td>\n",
       "      <td>9.7</td>\n",
       "      <td>0.97</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.80</td>\n",
       "      <td>17.7</td>\n",
       "      <td>1.77</td>\n",
       "      <td>170</td>\n",
       "      <td>314</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>56.2</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>22</td>\n",
       "      <td>2.2</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>...</td>\n",
       "      <td>12.9</td>\n",
       "      <td>1.29</td>\n",
       "      <td>10.2</td>\n",
       "      <td>1.02</td>\n",
       "      <td>23.1</td>\n",
       "      <td>2.31</td>\n",
       "      <td>191</td>\n",
       "      <td>359</td>\n",
       "      <td>2.2</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brentford</td>\n",
       "      <td>53.3</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>17</td>\n",
       "      <td>1.7</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>...</td>\n",
       "      <td>16.7</td>\n",
       "      <td>1.67</td>\n",
       "      <td>13.1</td>\n",
       "      <td>1.31</td>\n",
       "      <td>29.9</td>\n",
       "      <td>2.99</td>\n",
       "      <td>228</td>\n",
       "      <td>463</td>\n",
       "      <td>3.6</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Brighton</td>\n",
       "      <td>44.8</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>24</td>\n",
       "      <td>2.4</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>...</td>\n",
       "      <td>14.7</td>\n",
       "      <td>1.47</td>\n",
       "      <td>13.1</td>\n",
       "      <td>1.31</td>\n",
       "      <td>27.8</td>\n",
       "      <td>2.78</td>\n",
       "      <td>156</td>\n",
       "      <td>307</td>\n",
       "      <td>2.2</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Squad  Poss  Gls  Gls/90  Ast  Ast/90  G+A  G+A/90  npG  npG/90  ...  \\\n",
       "0      Arsenal  49.9   11     1.1    8     0.8   19     1.9   10     1.0  ...   \n",
       "1  Aston Villa  48.1   15     1.5   10     1.0   25     2.5   14     1.4  ...   \n",
       "2  Bournemouth  56.2   12     1.2   10     1.0   22     2.2   12     1.2  ...   \n",
       "3    Brentford  53.3   19     1.9   17     1.7   36     3.6   19     1.9  ...   \n",
       "4     Brighton  44.8   14     1.4   10     1.0   24     2.4   12     1.2  ...   \n",
       "\n",
       "   npxG  npxG/90   xAG  xAG/90  npxG+xAG  npxG+xAG/90  PrgC  PrgP  G+A-PK  \\\n",
       "0   9.6     0.96   6.8    0.68      16.4         1.64   213   317     1.8   \n",
       "1   9.7     0.97   8.0    0.80      17.7         1.77   170   314     2.4   \n",
       "2  12.9     1.29  10.2    1.02      23.1         2.31   191   359     2.2   \n",
       "3  16.7     1.67  13.1    1.31      29.9         2.99   228   463     3.6   \n",
       "4  14.7     1.47  13.1    1.31      27.8         2.78   156   307     2.2   \n",
       "\n",
       "   xG+xAG  \n",
       "0    1.72  \n",
       "1    1.93  \n",
       "2    2.31  \n",
       "3    2.99  \n",
       "4    2.94  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#function to change the duplicate column names so that they are per 90\n",
    "def rename_columns_with_suffix(selected_against):\n",
    "    new_columns = []  # Initialize a list to store new column names\n",
    "    seen_columns = set()  # Initialize a set to keep track of seen column names\n",
    "    for col_index, column_name in enumerate(selected_against.columns):\n",
    "        # Check if the column name is already in the set of seen column names\n",
    "        if column_name in seen_columns:\n",
    "            # If yes, add a suffix to the column name\n",
    "            new_column_name = f'{column_name}/90'\n",
    "        else:\n",
    "            # If no, keep the original column name\n",
    "            new_column_name = column_name\n",
    "        new_columns.append(new_column_name)  # Add the new column name to the list\n",
    "        seen_columns.add(column_name)  # Add the column name to the set of seen column names\n",
    "    selected_against.columns = new_columns  # Assign the new column names to the DataFrame\n",
    "\n",
    "# Rename columns with suffixes\n",
    "rename_columns_with_suffix(selected_against)\n",
    "\n",
    "selected_against.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cf8dbad2-9b9c-4555-9353-5742db44cf26",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index: 0, Column Name: Squad\n",
      "Index: 1, Column Name: Poss\n",
      "Index: 2, Column Name: Gls\n",
      "Index: 3, Column Name: Gls/90\n",
      "Index: 4, Column Name: Ast\n",
      "Index: 5, Column Name: Ast/90\n",
      "Index: 6, Column Name: G+A\n",
      "Index: 7, Column Name: G+A/90\n",
      "Index: 8, Column Name: npG\n",
      "Index: 9, Column Name: npG/90\n",
      "Index: 10, Column Name: PK\n",
      "Index: 11, Column Name: PKatt\n",
      "Index: 12, Column Name: CrdY\n",
      "Index: 13, Column Name: CrdR\n",
      "Index: 14, Column Name: xG\n",
      "Index: 15, Column Name: xG/90\n",
      "Index: 16, Column Name: npxG\n",
      "Index: 17, Column Name: npxG/90\n",
      "Index: 18, Column Name: xAG\n",
      "Index: 19, Column Name: xAG/90\n",
      "Index: 20, Column Name: npxG+xAG\n",
      "Index: 21, Column Name: npxG+xAG/90\n",
      "Index: 22, Column Name: PrgC\n",
      "Index: 23, Column Name: PrgP\n",
      "Index: 24, Column Name: G+A-PK\n",
      "Index: 25, Column Name: xG+xAG\n"
     ]
    }
   ],
   "source": [
    "for index, column_name in enumerate(selected_for.columns):\n",
    "    print(f\"Index: {index}, Column Name: {column_name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "d2d1c1e3-e71a-441a-9665-c246508088f3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index: 0, Column Name: Squad\n",
      "Index: 1, Column Name: Poss\n",
      "Index: 2, Column Name: Gls\n",
      "Index: 3, Column Name: Gls/90\n",
      "Index: 4, Column Name: Ast\n",
      "Index: 5, Column Name: Ast/90\n",
      "Index: 6, Column Name: G+A\n",
      "Index: 7, Column Name: G+A/90\n",
      "Index: 8, Column Name: npG\n",
      "Index: 9, Column Name: npG/90\n",
      "Index: 10, Column Name: PK\n",
      "Index: 11, Column Name: PKatt\n",
      "Index: 12, Column Name: CrdY\n",
      "Index: 13, Column Name: CrdR\n",
      "Index: 14, Column Name: xG\n",
      "Index: 15, Column Name: xG/90\n",
      "Index: 16, Column Name: npxG\n",
      "Index: 17, Column Name: npxG/90\n",
      "Index: 18, Column Name: xAG\n",
      "Index: 19, Column Name: xAG/90\n",
      "Index: 20, Column Name: npxG+xAG\n",
      "Index: 21, Column Name: npxG+xAG/90\n",
      "Index: 22, Column Name: PrgC\n",
      "Index: 23, Column Name: PrgP\n",
      "Index: 24, Column Name: G+A-PK\n",
      "Index: 25, Column Name: xG+xAG\n"
     ]
    }
   ],
   "source": [
    "for index, column_name in enumerate(selected_against.columns):\n",
    "    print(f\"Index: {index}, Column Name: {column_name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2d487f09-d7b7-463b-98eb-556d1b3f68bd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls/90</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast/90</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A/90</th>\n",
       "      <th>npG</th>\n",
       "      <th>npG/90</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG/90</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG/90</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG/90</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>...</td>\n",
       "      <td>15.5</td>\n",
       "      <td>1.55</td>\n",
       "      <td>11.7</td>\n",
       "      <td>1.17</td>\n",
       "      <td>27.2</td>\n",
       "      <td>2.72</td>\n",
       "      <td>192</td>\n",
       "      <td>413</td>\n",
       "      <td>2.9</td>\n",
       "      <td>2.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Squad  Poss  Gls  Gls/90  Ast  Ast/90  G+A  G+A/90  npG  npG/90  ...  \\\n",
       "0  Arsenal  50.1   16     1.6   13     1.3   29     2.9   16     1.6  ...   \n",
       "\n",
       "   npxG  npxG/90   xAG  xAG/90  npxG+xAG  npxG+xAG/90  PrgC  PrgP  G+A-PK  \\\n",
       "0  15.5     1.55  11.7    1.17      27.2         2.72   192   413     2.9   \n",
       "\n",
       "   xG+xAG  \n",
       "0    2.72  \n",
       "\n",
       "[1 rows x 26 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_for.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "fda00255-7be2-4b2c-b086-c181b9a7cbe7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls/90</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast/90</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A/90</th>\n",
       "      <th>npG</th>\n",
       "      <th>npG/90</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG/90</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG/90</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG/90</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>49.9</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.8</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Squad  Poss  Gls  Gls/90  Ast  Ast/90  G+A  G+A/90  npG  npG/90  ...  \\\n",
       "0  Arsenal  49.9   11     1.1    8     0.8   19     1.9   10     1.0  ...   \n",
       "\n",
       "   npxG  npxG/90  xAG  xAG/90  npxG+xAG  npxG+xAG/90  PrgC  PrgP  G+A-PK  \\\n",
       "0   9.6     0.96  6.8    0.68      16.4         1.64   213   317     1.8   \n",
       "\n",
       "   xG+xAG  \n",
       "0    1.72  \n",
       "\n",
       "[1 rows x 26 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_against.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d5d15775-650d-4ead-b381-63c0122ebe63",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rk</th>\n",
       "      <th>Squad</th>\n",
       "      <th>MP</th>\n",
       "      <th>W</th>\n",
       "      <th>D</th>\n",
       "      <th>L</th>\n",
       "      <th>GF</th>\n",
       "      <th>GA</th>\n",
       "      <th>GD</th>\n",
       "      <th>Pts</th>\n",
       "      <th>Pts/MP</th>\n",
       "      <th>xG</th>\n",
       "      <th>xGA</th>\n",
       "      <th>xGD</th>\n",
       "      <th>xGD/90</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Liverpool</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>18.1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rk      Squad  MP  W  D  L  GF  GA  GD  Pts  Pts/MP    xG  xGA   xGD  \\\n",
       "0   1  Liverpool  10  8  1  1  19   6  13   25     2.5  18.1  8.0  10.0   \n",
       "\n",
       "   xGD/90  \n",
       "0     1.0  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_table.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "14131e30-f327-405d-83bf-abf4feeed684",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Pts/MP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Liverpool</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Squad  Pts/MP\n",
       "0  Liverpool     2.5"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create new table df with just squad and points per match played\n",
    "table_pts_mp = selected_table[['Squad','Pts/MP']]\n",
    "table_pts_mp.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5337e28f-6bf1-41d3-828b-f917f70acdab",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'merged_df_for' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[34], line 5\u001b[0m\n\u001b[1;32m      2\u001b[0m numeric_columns_for \u001b[38;5;241m=\u001b[39m selected_for\u001b[38;5;241m.\u001b[39mselect_dtypes(include\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfloat64\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mint64\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m#calculate correlation with 'Pts/MP'\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m corr_for_with_pts_mp \u001b[38;5;241m=\u001b[39m numeric_columns_for\u001b[38;5;241m.\u001b[39mcorrwith(merged_df_for[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPts/MP\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28mprint\u001b[39m(corr_for_with_pts_mp)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'merged_df_for' is not defined"
     ]
    }
   ],
   "source": [
    "#select numeric columns\n",
    "numeric_columns_for = selected_for.select_dtypes(include=['float64', 'int64'])\n",
    "\n",
    "#calculate correlation with 'Pts/MP'\n",
    "corr_for_with_pts_mp = numeric_columns_for.corrwith(merged_df_for['Pts/MP'])\n",
    "\n",
    "print(corr_for_with_pts_mp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "196d590f-ff50-4fda-bc73-ba8cf3cbf86b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#select numeric columns\n",
    "numeric_columns_against = selected_against.select_dtypes(include=['float64', 'int64'])\n",
    "\n",
    "#calculate correlation with 'Pts/MP'\n",
    "corr_against_with_pts_mp = numeric_columns_against.corrwith(merged_df_against['Pts/MP'])\n",
    "\n",
    "print(corr_against_with_pts_mp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "29d3d570-324c-464b-862c-24861ad106a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#use correlation statistics to analyze teams. pit teams against each other"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "34664890",
   "metadata": {},
   "outputs": [],
   "source": [
    "against_copy = selected_against.copy()\n",
    "for_copy = selected_for.copy()\n",
    "table_copy = table_pts_mp.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "8ecec725",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poss_x          -0.083027\n",
      "Gls_x            0.185383\n",
      "Gls/90_x         0.185383\n",
      "Ast_x            0.292866\n",
      "Ast/90_x         0.292866\n",
      "G+A_x            0.243398\n",
      "G+A/90_x         0.243398\n",
      "npG_x            0.206581\n",
      "npG/90_x         0.206581\n",
      "PK_x            -0.109823\n",
      "PKatt_x         -0.131293\n",
      "CrdY_x          -0.186953\n",
      "CrdR_x           0.022050\n",
      "xG_x             0.091492\n",
      "xG/90_x          0.091492\n",
      "npxG_x           0.124191\n",
      "npxG/90_x        0.124191\n",
      "xAG_x            0.121683\n",
      "xAG/90_x         0.121683\n",
      "npxG+xAG_x       0.123548\n",
      "npxG+xAG/90_x    0.123548\n",
      "PrgC_x          -0.090676\n",
      "PrgP_x           0.024683\n",
      "G+A-PK_x         0.254295\n",
      "xG+xAG_x         0.106397\n",
      "Poss_y           0.083027\n",
      "Gls_y           -0.211675\n",
      "Gls/90_y        -0.211675\n",
      "Ast_y           -0.266442\n",
      "Ast/90_y        -0.266442\n",
      "G+A_y           -0.241622\n",
      "G+A/90_y        -0.241622\n",
      "npG_y           -0.232440\n",
      "npG/90_y        -0.232440\n",
      "PK_y             0.066694\n",
      "PKatt_y          0.181395\n",
      "CrdY_y           0.254192\n",
      "CrdR_y           0.088094\n",
      "xG_y            -0.265969\n",
      "xG/90_y         -0.265969\n",
      "npxG_y          -0.311295\n",
      "npxG/90_y       -0.311295\n",
      "xAG_y           -0.395122\n",
      "xAG/90_y        -0.395122\n",
      "npxG+xAG_y      -0.350293\n",
      "npxG+xAG/90_y   -0.350293\n",
      "PrgC_y          -0.213941\n",
      "PrgP_y          -0.220324\n",
      "G+A-PK_y        -0.251801\n",
      "xG+xAG_y        -0.325667\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#correlate stats for and against with points per match\n",
    "\n",
    "merged_stats = pd.merge(selected_for, selected_against, on ='Squad')\n",
    "\n",
    "numeric_columns_merged = merged_stats.select_dtypes(include=['float64', 'int64'])\n",
    "\n",
    "corr_merged_pts_mp = numeric_columns_merged.corrwith(table_pts_mp['Pts/MP'])\n",
    "\n",
    "print(corr_merged_pts_mp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "74b87c73",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f3f8808e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#added points per match to stats dataframe\n",
    "\n",
    "merged_df = pd.merge(table_pts_mp, merged_stats, on='Squad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "0e693e87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Pts/MP</th>\n",
       "      <th>Poss_x</th>\n",
       "      <th>Gls_x</th>\n",
       "      <th>Gls/90_x</th>\n",
       "      <th>Ast_x</th>\n",
       "      <th>Ast/90_x</th>\n",
       "      <th>G+A_x</th>\n",
       "      <th>G+A/90_x</th>\n",
       "      <th>npG_x</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG_y</th>\n",
       "      <th>npxG/90_y</th>\n",
       "      <th>xAG_y</th>\n",
       "      <th>xAG/90_y</th>\n",
       "      <th>npxG+xAG_y</th>\n",
       "      <th>npxG+xAG/90_y</th>\n",
       "      <th>PrgC_y</th>\n",
       "      <th>PrgP_y</th>\n",
       "      <th>G+A-PK_y</th>\n",
       "      <th>xG+xAG_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Liverpool</td>\n",
       "      <td>2.5</td>\n",
       "      <td>56.7</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>35</td>\n",
       "      <td>3.5</td>\n",
       "      <td>17</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.80</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.67</td>\n",
       "      <td>14.7</td>\n",
       "      <td>1.47</td>\n",
       "      <td>154</td>\n",
       "      <td>326</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Manchester City</td>\n",
       "      <td>2.3</td>\n",
       "      <td>64.3</td>\n",
       "      <td>21</td>\n",
       "      <td>2.1</td>\n",
       "      <td>15</td>\n",
       "      <td>1.5</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>20</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>8.4</td>\n",
       "      <td>0.84</td>\n",
       "      <td>18.4</td>\n",
       "      <td>1.84</td>\n",
       "      <td>133</td>\n",
       "      <td>210</td>\n",
       "      <td>1.7</td>\n",
       "      <td>1.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Nott'ham Forest</td>\n",
       "      <td>1.9</td>\n",
       "      <td>41.9</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>7</td>\n",
       "      <td>0.7</td>\n",
       "      <td>21</td>\n",
       "      <td>2.1</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>8.7</td>\n",
       "      <td>0.87</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.67</td>\n",
       "      <td>15.4</td>\n",
       "      <td>1.54</td>\n",
       "      <td>258</td>\n",
       "      <td>490</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chelsea</td>\n",
       "      <td>1.8</td>\n",
       "      <td>55.0</td>\n",
       "      <td>20</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>19</td>\n",
       "      <td>...</td>\n",
       "      <td>11.2</td>\n",
       "      <td>1.12</td>\n",
       "      <td>8.5</td>\n",
       "      <td>0.85</td>\n",
       "      <td>19.6</td>\n",
       "      <td>1.96</td>\n",
       "      <td>178</td>\n",
       "      <td>357</td>\n",
       "      <td>1.7</td>\n",
       "      <td>2.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>1.8</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 52 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Squad  Pts/MP  Poss_x  Gls_x  Gls/90_x  Ast_x  Ast/90_x  G+A_x  \\\n",
       "0        Liverpool     2.5    56.7     19       1.9     16       1.6     35   \n",
       "1  Manchester City     2.3    64.3     21       2.1     15       1.5     36   \n",
       "2  Nott'ham Forest     1.9    41.9     14       1.4      7       0.7     21   \n",
       "3          Chelsea     1.8    55.0     20       2.0     16       1.6     36   \n",
       "4          Arsenal     1.8    50.1     16       1.6     13       1.3     29   \n",
       "\n",
       "   G+A/90_x  npG_x  ...  npxG_y  npxG/90_y  xAG_y  xAG/90_y  npxG+xAG_y  \\\n",
       "0       3.5     17  ...     8.0       0.80    6.7      0.67        14.7   \n",
       "1       3.6     20  ...    10.0       1.00    8.4      0.84        18.4   \n",
       "2       2.1     13  ...     8.7       0.87    6.7      0.67        15.4   \n",
       "3       3.6     19  ...    11.2       1.12    8.5      0.85        19.6   \n",
       "4       2.9     16  ...     9.6       0.96    6.8      0.68        16.4   \n",
       "\n",
       "   npxG+xAG/90_y  PrgC_y  PrgP_y  G+A-PK_y  xG+xAG_y  \n",
       "0           1.47     154     326       1.1      1.47  \n",
       "1           1.84     133     210       1.7      1.92  \n",
       "2           1.54     258     490       1.0      1.62  \n",
       "3           1.96     178     357       1.7      2.20  \n",
       "4           1.64     213     317       1.8      1.72  \n",
       "\n",
       "[5 rows x 52 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "83d96a8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4oAAAIhCAYAAAAIIURhAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAACcxklEQVR4nOzde3zP9f//8dt7M5vDNkbYcj4t7GRmc6rmMDSGEB0UqZRDCEkUJkqllK9KRVQScsp89hFyKBkjDWsO0UYyhNkBm9levz/22/vj3TY2tr3H7tfLxaW9nq/n6/V6vJ6v7d0eez5fz6fJMAwDERERERERkf/PxtoBiIiIiIiISMmiRFFEREREREQsKFEUERERERERC0oURURERERExIISRREREREREbGgRFFEREREREQsKFEUERERERERC0oURURERERExIISRREREREREbGgRFFEpJhs376dxx57jNq1a2Nvb0+FChVo1qwZY8eO5dChQ/k+z/79+3n66aepV68eDg4OVKxYEV9fX9555x0uXLhQhHeQt48//phFixYVyblNJhNTp04tknMXpzNnzjBx4kR8fHxwcnKibNmy1KxZk969e7N27VoyMjLyfa5z585hb2+PyWRiz549RRi1pbp16zJo0KAiO/+bb77JmjVriuz8IiKSf2WsHYCISGnw2muvMWPGDFq3bs1rr71Go0aNuHbtGvv37+fLL7/k/fff59q1a9ja2t7wPJ9//jnDhg3D3d2dl19+maZNm5Kens6ePXuYN28eERERrF69upju6n8+/vhjqlatWqRJxJ1s586d9OjRA8MwGDp0KK1ataJixYqcOHGCsLAwevfuzaeffsozzzyTr/N9/fXXXL16FYAFCxbg5+dXlOGbrV69GicnpyI7/5tvvknfvn3p1atXkV1DRETyR4miiEgR+/bbb5kxYwYvvPACH3/8MSaTybwvKCiIMWPG8PHHH9/0PBEREQwdOpSgoCDWrFmDvb29xXnGjh3L+vXrb3iOK1euUK5cuVu/GSmwixcv0qtXLypWrMgvv/yCq6urxf4BAwawf/9+zp8/n+9zfvHFF1SrVo06derw7bff8v777xfLc23evHmRX0NEREoGDT0VEbkFqampNG/enIYNG5KYmGguP336NDVq1CAwMNA8lHD69OlUrVqV2bNnWySJ2UwmE8OHD79p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4Ycftjh25syZRt26dQ17e3ujSZMmxueff25MmTLF+PevCXnNevrdd99Z1IuNjbVow0OHDhmPPfaY0aBBA6NcuXKGs7Oz4e/vbyxatMjiuKioKKNt27ZG+fLlbzo7q4iIFC2TYdzGOCgRERG5Y8TGxnLfffcxZcoUJk6caO1wRESkBFOiKCIichfat28f3377LW3atMHJyYnDhw/zzjvvkJSURHR0dK4zooqIiGTTO4oiIiJ3oQoVKrBnzx4WLFjAxYsXcXZ2JjAwkBkzZihJFBGRm1KPooiIiIiIiFjQ8hgiIiIiIiJiQYmiiIiIiIiIWFCiKCIiIiIiIhbu+slsMjMzOXXqFI6OjphMJmuHIyIiIiIiVmIYBsnJybi5uWFjoz6zG7nrE8VTp05Rq1Yta4chIiIiIiIlxF9//UXNmjWtHUaJdtcnio6OjkDWN4OTk5NVY0lPT2fDhg107twZOzs7q8ZSWukZWJfa3/r0DKxL7W99egbWpfa3vtL+DJKSkqhVq5Y5R5C83fWJYvZwUycnpxKRKJYvXx4nJ6dS+YNZEugZWJfa3/r0DKxL7W99egbWpfa3Pj2DLHol7eY0MFdEREREREQsKFEUERERERERC0oURURERERExIISRREREREREbGgRFFEREREREQsKFEUERERERERC0oURURERERExIISRREREREREbGgRFFEREREREQsKFEUERERERERC1ZNFN966y1atmyJo6Mj1apVo1evXhw+fNiijmEYTJ06FTc3N8qVK0dgYCC///67lSIWKX1MJhPDhg0zb8fHx2Nra8vUqVML7RpxcXH4+fnd9nkWLVrE2bNnb+schmHwxhtv0KhRIzw8PGjVqhVbt24FoH379kBWvMuXL7/dcEVERERKLKsmitu2bWP48OHs3LmTjRs3cu3aNTp37sylS5fMdd555x3ef/995s6dy+7du6lRowZBQUEkJydbMXKR0sPFxYWdO3eSkZEBwIoVK2jWrJmVo8rdrSSK2feVbc6cOURGRrJv3z6io6NZvXo1iYmJAGzZsgVQoigiIiJ3P6smiuvXr2fQoEE0a9YMb29vFi5cyIkTJ/j111+BrL/sf/DBB0yaNInevXvj4eHBl19+yeXLl1myZIk1QxcpNUwmE/fffz/btm0DYPXq1fTu3du8//vvvycgIAAfHx969uxJSkoK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N6337XOtaN2gSqFeO1tJa//SSM/AutT+1qdnYF1qf+sr7c+gJOUGJV2JWB5DpLTq6uFKUNMaBVqq4lZlD3c9nZia63uKJqBGIQ93FREREZE7kxJFESuztTEVWQ/ev68zJaQpQxfvxQQWyWJRDXcVERERkTuT3lEUKUW6erjyyQBfajhbzqZaw9kh16UxRERERKR0Uo+iSClTnMNdRUREROTOpERRpBQqruGuIiIiInJn0tBTERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUahatWqOsmeffZZjx45ZIZrcLVq0iHHjxlk7DJFS66+//qJXr140aNCApk2b8sQTTzB79uwC/VzGxcXh5+dXhFGKiIhIYVGiKLmaP38+DRo0uK1zZGRkFFI0ImJNhmHw8MMP07t3b44dO0ZMTAwDBw7E2dnZ2qGJiIhIEVGiWEwyMg0iYy8AEBl7gYxMw8oR3VhgYCDR0dF8/PHHTJkyxVweGhrK3LlzAZgxYwYtW7bEy8uLefPmAbB161Y6d+5Mv379aN++PVu3bqVDhw6EhITQpEkTXnvtNfO53n77bTw8PPD09OSbb74Bsn4hHT16NB4e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KmPGjDFvJyUlUatWLTp37mzVb4aMTIPdf/7DhSN7cGnsR8v695ToJTHuVunp6WzcuJGgoCDs7OysHU6po/a/sYxMg1+PJ3AuJY2qFe1pUadyoX9O6BlYl9rf+vQMrEvtb32l/RlkjzaUmyuxieKVK1eYOHEiq1evplu3bgB4eXkRFRXFrFmz8kwU7e3tLdb1ymZnZ2fVHwY7oFXDaoQfyfpvafzBLEms/f1Q2qn9c2cHtG1cvXiupWdgVWp/69MzsC61v/WV1mdQGu/5VpXYdRSz3ym0sbEM0dbWNs+1u0REREREROT2WbVHMSUlhaNHj5q3Y2NjiYqKwsXFhdq1a/Pggw/y8ssvU65cOerUqcO2bdv46quvNDW6iIiIiIhIEbJqorhnzx7at29v3s5+t3DgwIEsWrSIpUuX8uqrr/LEE09w4cIF6tSpw4wZM3jhhResFbKIiIiIiMhdz6qJYmBgIDeadLVGjRosXLiwGCMSERERERGREvuOooiIiIiIiFiHEkURERERERGxoERRRERERERELChRFBEREREREQtKFEVERERERMSCEkURERERERGxoERRRERERERELChRFBEREREREQtKFEVERERERMSCEkURERERERGxoERRRERERERELChRFBEREREREQtKFEVERERERMSCEkURERERERGxoERRRERERERELChRFBEREREREQtKFEVERERERMSCEkURERERERGxoERRRERERERELChRFBEREREREQtKFEVERERERMSCEkURERERERGxoERRRERERERELChRFBEREREREQtKFEVERERERMSCEkURERERERGxoERRRERERERELChRFBEREREREQtKFEVERERERMSCEkURERERERGxoERRRERERERELChRFBEREREREQtKFEVERERERMSCEkUREREpEcqUKYOPjw8+Pj60bNmSqKioQjlvVFQUGzZsMG9fvHiR1q1b07x5cw4cOHBL56xbty4pKSmFEp+ISEmkRFFERERKhEqVKhEVFUVUVBQTJkxg2rRpOepkZGQU+Lz/ThQPHDiAr68vv/32G56enjc9/lauKSJypytj7QBERERE/i0pKQlnZ2cAFi1axA8//EBSUhIVKlTg//7v/3j++ec5efIkDg4OzJ8/n/vuu49Bgwbh7OzMrl27OH/+PPPnz6ddu3ZM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Xz8iIyM5cOAAdnZ2hIWFmY+pUKEC27dvp3///vTv359vvvmGyMhIZsyYUej3JSIiInK3ydfQ07Vr1+b7hD169LjlYETk9qyPjic0LIb4xFRzmauzA1NCmpaIpTvyGno6f/58hg8fzhtvvJHrcRUrVqRDhw5ERUVRoUIF4uLiANi3bx+vvfYaSUlJJCQkUK9ePXr27An877PI09MTPz8/KlWqBICjoyMJCQn4+vqydetW6tSpY77OQw89xKhRo5gzZw4rV67kzJkz9O3blz179rBo0SKio6OZNWtWEbSMiIiISMmSr0SxV69eFtsmkwnDMCy2s2VkZBROZCJSIOuj4xm6eC//7j88nZjK0MV7S+w6jyaTieXLl+Pn58evv/5KkyZNctSxt7cHICoqiiNHjlC9enUAnnnmGdatW0fTpk2ZOXMmqampOY6xsbExf529nZGRQd++ffnuu+8YN24cAAkJCURFRdGpUye6du1aZPcrIiIicifI19DTzMxM878NGzbg4+PDf//7Xy5evEhiYiLh4eH4+vqyfv36oo5XRHKRkWkQGhaTI0kEzGWTVkezeu/JEjcctWLFihw+fJgZM2awadMmc/nFixd5+OGH8fb25uLFi2RkZDB58mQiIyOZN28eP/zwAykpKbz00kt4eHgwY8YMLl68CMChQ4eYOXMmrVq1YsiQIZw+fTrHdfv37893331n3l69ejXdu3enTJky1K1bl5SUlDxj/v777wkICMDHx4eePXvesK6IiIjInajA7yiOHj2aDz/8kC5duuDk5ISjoyNdunTh/fffZ+TIkUURo4jcRGTsBYvhpv9mAOcvXeWl5ft47POdtHt7M+uj44svwBvo2LEjiYmJTJ8+natXr3L58mUA/vrrL15++WX27duHs7Mztra2TJs2DX9/f1544QW6dOnCfffdx549e6hWrRotW7bkv//9r/m8SUlJ7Ny5k+HDh7Nv374c1/Xz8+P8+fMcP34cgOXLl9O/f/98xfzAAw+wa9cuoqKiCAgIYMGCBYXQEiIiIiIlR4ETxWPHjuHs7Jyj3NnZ2fzekIgUr7PJeSeJuckejlrcyWJ8fM7r/fnnn2zatIlNmzbxzDPP0LhxYwBefvllPv30U+bMmWNeTxGgefPm5plRk5KSOHDgAJs3b+bHH38kMTERgK5duzJw4EAARowYQfny5c3H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9iy1a9c2l2VkZDB27Fg++OAD4uLicj3O3t4+12TVzs6uxPwwlKRYSis9A+tS+1ufnoF1qf2tT8/AutT+1ldan0FpvOdble9ZT7/55psbDvkcPXo0X331VWHEBMCTTz7J/v37iYqKMv9zc3Pj5Zdf5ocffii064iIiIiIiIilfPco/vHHH3h7e+e538vLiz/++KNAF09JSeHo0aPm7djYWKKionBxcaF27dpUqVLFor6dnR01atTA3d29QNcRERERERGR/Mt3j+K1a9f4559/8tz/zz//FHhtxT179tC8eXOaN28OwJgxY2jevDmTJ08u0HlERERERESk8OS7R7FZs2Zs2rSJFi1a5Lp/48aN+V7CIltgYCAFmXQ1r/cSRUREREREpPDku0dx8ODBvPHGG6xbty7HvrCwMKZPn87gwYMLNTiRksJkMvHaa6+Zt8eNG8eiRYtueMwHH3zA1atXzdvvvPOO+eu4uDgGDRoEwKBBg3L9uSpMgwYNon79+vj4+ODj48OKFSuK5DqLFi3i7NmzRXJuERERESk++U4UhwwZQq9evejRowdNmzbl4Ycfpnfv3jRp0oRevXoREhLCkCFDijJWEaupWLEi33zzTYGmVL5RomgNc+bMMU8M1bdv33wdk5FRsNWvlSiKiIiI3B3ynSgCLF68mKVLl9K4cWOOHDnCoUOHcHd359tvv+Xbb78tqhhFrM7e3p4nnniCTz75JMe+vXv34u/vj5eXF0899RSpqal89NFHnDp1ijZt2vDwww8zadIkLl68iI+PD8OHD8fW1hZnZ2fzOTZu3EirVq1o1KgR27ZtA+DYsWPcf//9+Pr60qpVKw4ePAhkJWN9+/alW7du1KtXjy+//JKpU6fi5eVF586dSUtLy9c9nTt3jpCQELy8vAgMDDQP7R40aBBjx44lMDCQd955h8jISHMcffr0ISUlBYCXX34Zd3d3vLy8mD59OqtXr2bPnj307duXgICA22luEREREbGyfL+jmK1fv37069evKGKRUi4j0yAy9gJnk1Op5uiAfz0XbG1M1g7LbNSoUbRq1YpRo0ZZlA8cOJD58+cTEBDA0KFD+fjjjxkzZgzvvvsuO3bsoGLFigB8+umnREVFmY/78MMPzV9fvHiRnTt3snnzZqZNm8aPP/6Iq6srmzZtwt7enh07djBx4kRWr14NQExMDHv2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EREpPaw69PShhx7ioYceynWfs7MzGzdutCj7v//7P/z9/Tlx4gS1a9cujhBFRERERERKnTvqHcXExERMJhOVKlXKs05aWhppaWnm7aSkJCBrKGt6enpRh3hD2de3dhylmZ6Bdan9rU/PwLrU/tanZ2Bdan/rK+3PoLTe960wGYZhWDsIAJPJxOrVq+nVq1eu+1NTU2nXrh333XcfixcvzvM8U6dOJTQ0NEf5kiVLKF++fGGFKyIiIiIid5jLly/z+OOPk5iYiJOTk7XDKdHuiEQxPT2dRx55hBMnTrB169YbPtTcehRr1arFuXPnrP7NkJ6ezsaNGwkKCsLOzs6qsZRWegbWpfa3Pj0D61L7W5+egXWp/a2vtD+DpKQkqlatqkQxH0r80NP09HT69etHbGwsmzdvvukDtbe3x97ePke5nZ1diflhKEmxlFZ6Btal9rc+PQPrUvtbn56Bdan9ra+0PoPSeM+3qkQnitlJ4h9//MGWLVuoUkXreImIiIiIiBQ1qyaKKSkpHD161LwdGxtLVFQULi4uuLm50bdvX/bu3cu6devIyMjg9OnTALi4uFC2bFlrhS0iIiIiInJXs2qiuGfPHtq3b2/eHjNmDAADBw5k6tSprF27FgAfHx+L47Zs2UJgYGBxhSkiIiIiIlKqWDVRDAwM5EZz6ZSQeXZERERERERKFRtrByAiIiIiIiIlixJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERERELShRFRERERETEghJFERERERERsaBEUURERERERCwoURQRERERKSWmT5/OyJEjad68OX5+fsTGxhb4HB988AFXr141b1etWrUwQ7yhixcv8tlnnxXb9UozJYoiIiIiIqXAjh07+Omnn5g9eza//fYba9asoVKlSgU+z78TxeKkRLH4KFEUERERESkkGZkGEcfO833U30QcO09GpmHtkMxOnz5NpUqVsLW1BaBmzZpUrlyZr7/+Gk9PTzw9PXn33XcBiIuLw8/Pz3zsuHHjWLRoER999BGnTp2iTZs2PPzwwxb7PT096dixI5cuXQJg3rx5+Pv74+npydNPP01mZiYAgYGBjBs3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Rt27d5e7u7vq1q2r+Ph41alTR/PmzbM/Ji4uToGBgapatapq1qypkSNHKisry3786ltPY2NjFRwcrJUrV6pOnTry8vLSgAEDlJmZaX/M+++/r8DAQLm7u6tatWrq2rWrsrOzFRsbqxUrVuiDDz6QzWaTzWZTYmLiHxxdAABKn7PVBQAAKp577rlHb731lnr37q2IiAg1adJEgwcP1siRIxURESFJeueddxQeHq777rvvmuew2Ww3fI3MzEy99957Sk5OVpMmTZSdna3ExER16tTJ/pihQ4fql19+UWJiolxcXDR+/Hilp6ebzlOpUiXNnz9fderUUVpamkaOHKmYmBgtWrTouq/9ww8/aP369dq4caPOnTunRx55RLNnz9aMGTN05swZDRw4UHPnzlWfPn2UmZmpTz/9VIZh6Pnnn9eRI0d0/vx5LVu2TJLk7e19U2MKAEBZIigCAEpFVFSUnnzyST366KNq3bq13NzcNHv2bPvx1NRUhYWFmZ7Tp08fJSQkSJJatGihPXv2XPf8a9asUcOGDRUQECBJGjBggJYuXWoPit9++622bt2qffv26f7775ckvfnmm2rYsKHpPGPHjrX/vm7duvr73/+up59++oZBsbCwUMuXL5eHh4ckaciQIdq2bZs9KBYUFKhv376qXbu2JCkwMND+XHd3d+Xl5cnX1/e65wcAwGrcegoAKDWvvPKKCgoK9O6772r16tVyc3MzHb961nDRokVKSUnR8OHDlZOTc8NzL126VIMHD7ZvDx48WGvXrtVvv/0mSTp69KicnZ3VsmVL+2MaNGigu+66y3SeHTt2KDw8XPfee688PDw0dOhQnT17VtnZ2dd97Tp16thDoiT5+fnZZyqDgoLUpUsXBQYGql+/fvrnP/+pc+fO3fC9AABQ3hAUAQCl5tixYzp9+rQKCwt1/Phx07GGDRvq22+/Ne3z8/NTgwYNir0d85tvvlFycrJiYmLk7OwsZ2dntWvXTrm5uXrnnXckqcjnFa/4/f7jx48rKipKzZs317///W8dOHBAr7/+uiQpPz//uq/v4uJi2rbZbCosLJQkOTk5KSEhQZs3b1azZs20YMECNW7cWGlpaTd8TwAAlCcERQBAqbh48aIeffRR9e/fXy+99JKeeOIJ/ec//7EfHzhwoBISEnTo0KE/fO6lS5eqY8eOOnz4sFJSUuy/YmJitHTpUklSkyZNVFBQYDr/999/b59xlKT9+/eroKBAr776qtq1a6dGjRrd9LIcN2Kz2RQSEqJp06bp0KFDqly5statWydJqly5si5duvSnXwMAgNLEZxQBAKVi8uTJysjI0Pz583XHHXdo8+bNeuKJJ7Rx40ZJ0rhx47Rp0yZ17txZsbGx+stf/qK77rpLqamp2rx5s5ycnK553vz8fK1cuVLTp09X8+bNTcdGjBihuXPn6vDhwwoKClLXrl3117/+VYsXL5aLi4uee+45ubu72295rV+/vgoKCrRgwQL16NFDu3fv1pIlS/7U+05OTta2bdsUERGh6tWrKzk5Wf/973/VtGlTSZdvW/3444919OhRVatWTV5eXkVmKAEAsBozigCAEpeYmKh58+Zp5cqV8vT0VKVKlbRy5UolJSVp8eLFkiQ3Nzdt27ZNEydO1LJlyxQaGqqmTZtq7NixCgkJ0fr166957g0bNujs2bPq06dPkWMNGzZUYGCgfVbx7bfflo+Pjzp27Kg+ffroySeflIeHh/2zksHBwYqLi9OcOXPUvHlzrV69WrNmzfpT793T01O7du1SVFSUGjVqpClTpujVV1/Vgw8+KEl68skn1bhxY91///265557tHv37j/1egAAlAabcb0PcQAAUMGcPHlSNWvW1NatW9WlSxerywEAoNwiKAIAKqzt27crKytLgYGBOnPmjGJiYnTq1CmlpqZyuycAADfAZxQBABVWfn6+Jk2apGPHjsnDw0MdOnTQ6tWrCYkAABSDGUUAAAAAgAlfZgMAAAAAMCEoAgAAAABMCIoAAAAAABOCIgAAAADAhKAIAAAAADAhKAIAAAAATAiKAAAAAAATgiIAAAAAwOT/AbpJKJfZadjFAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot xG Created vs. xG Against\n",
    "\n",
    "plt.figure(figsize = (10,6))\n",
    "plt.scatter(merged_df['xG_y'], merged_df['xG_x'])\n",
    "\n",
    "offset = 0.75\n",
    "for i, row in merged_df.iterrows():\n",
    "    plt.text(row['xG_y'] + offset, row['xG_x'], row['Squad'], fontsize = 7)\n",
    "\n",
    "plt.title('xG Created vs. xG Against')\n",
    "plt.xlabel('xG Against')\n",
    "plt.ylabel('xG Created')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "33815348",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Pts/MP</th>\n",
       "      <th>Poss_x</th>\n",
       "      <th>Gls_x</th>\n",
       "      <th>Gls/90_x</th>\n",
       "      <th>Ast_x</th>\n",
       "      <th>Ast/90_x</th>\n",
       "      <th>G+A_x</th>\n",
       "      <th>G+A/90_x</th>\n",
       "      <th>npG_x</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG/90_y</th>\n",
       "      <th>xAG_y</th>\n",
       "      <th>xAG/90_y</th>\n",
       "      <th>npxG+xAG_y</th>\n",
       "      <th>npxG+xAG/90_y</th>\n",
       "      <th>PrgC_y</th>\n",
       "      <th>PrgP_y</th>\n",
       "      <th>G+A-PK_y</th>\n",
       "      <th>xG+xAG_y</th>\n",
       "      <th>xGD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Liverpool</td>\n",
       "      <td>2.5</td>\n",
       "      <td>56.7</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>35</td>\n",
       "      <td>3.5</td>\n",
       "      <td>17</td>\n",
       "      <td>...</td>\n",
       "      <td>0.80</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.67</td>\n",
       "      <td>14.7</td>\n",
       "      <td>1.47</td>\n",
       "      <td>154</td>\n",
       "      <td>326</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.47</td>\n",
       "      <td>10.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Manchester City</td>\n",
       "      <td>2.3</td>\n",
       "      <td>64.3</td>\n",
       "      <td>21</td>\n",
       "      <td>2.1</td>\n",
       "      <td>15</td>\n",
       "      <td>1.5</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>20</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>8.4</td>\n",
       "      <td>0.84</td>\n",
       "      <td>18.4</td>\n",
       "      <td>1.84</td>\n",
       "      <td>133</td>\n",
       "      <td>210</td>\n",
       "      <td>1.7</td>\n",
       "      <td>1.92</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Nott'ham Forest</td>\n",
       "      <td>1.9</td>\n",
       "      <td>41.9</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>7</td>\n",
       "      <td>0.7</td>\n",
       "      <td>21</td>\n",
       "      <td>2.1</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>0.87</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.67</td>\n",
       "      <td>15.4</td>\n",
       "      <td>1.54</td>\n",
       "      <td>258</td>\n",
       "      <td>490</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.62</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chelsea</td>\n",
       "      <td>1.8</td>\n",
       "      <td>55.0</td>\n",
       "      <td>20</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>19</td>\n",
       "      <td>...</td>\n",
       "      <td>1.12</td>\n",
       "      <td>8.5</td>\n",
       "      <td>0.85</td>\n",
       "      <td>19.6</td>\n",
       "      <td>1.96</td>\n",
       "      <td>178</td>\n",
       "      <td>357</td>\n",
       "      <td>1.7</td>\n",
       "      <td>2.20</td>\n",
       "      <td>4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>1.8</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "      <td>5.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 53 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Squad  Pts/MP  Poss_x  Gls_x  Gls/90_x  Ast_x  Ast/90_x  G+A_x  \\\n",
       "0        Liverpool     2.5    56.7     19       1.9     16       1.6     35   \n",
       "1  Manchester City     2.3    64.3     21       2.1     15       1.5     36   \n",
       "2  Nott'ham Forest     1.9    41.9     14       1.4      7       0.7     21   \n",
       "3          Chelsea     1.8    55.0     20       2.0     16       1.6     36   \n",
       "4          Arsenal     1.8    50.1     16       1.6     13       1.3     29   \n",
       "\n",
       "   G+A/90_x  npG_x  ...  npxG/90_y  xAG_y  xAG/90_y  npxG+xAG_y  \\\n",
       "0       3.5     17  ...       0.80    6.7      0.67        14.7   \n",
       "1       3.6     20  ...       1.00    8.4      0.84        18.4   \n",
       "2       2.1     13  ...       0.87    6.7      0.67        15.4   \n",
       "3       3.6     19  ...       1.12    8.5      0.85        19.6   \n",
       "4       2.9     16  ...       0.96    6.8      0.68        16.4   \n",
       "\n",
       "   npxG+xAG/90_y  PrgC_y  PrgP_y  G+A-PK_y  xG+xAG_y   xGD  \n",
       "0           1.47     154     326       1.1      1.47  10.1  \n",
       "1           1.84     133     210       1.7      1.92   9.1  \n",
       "2           1.54     258     490       1.0      1.62   4.1  \n",
       "3           1.96     178     357       1.7      2.20   4.6  \n",
       "4           1.64     213     317       1.8      1.72   5.1  \n",
       "\n",
       "[5 rows x 53 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#created xG against variable in merged dataframe\n",
    "\n",
    "merged_df['xGD'] = merged_df['xG_x'] - merged_df['xG_y']\n",
    "merged_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "19801eb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot of Points Per Match and xG Difference\n",
    "\n",
    "plt.figure(figsize = (10,6))\n",
    "plt.scatter(merged_df['xGD'], merged_df['Pts/MP'])\n",
    "\n",
    "offset = 0.75\n",
    "for i, row in merged_df.iterrows():\n",
    "    plt.text(row['xGD'] + offset, row['Pts/MP'], row['Squad'], fontsize = 7)\n",
    "\n",
    "plt.title('Points Per Match vs. xG Difference')\n",
    "plt.xlabel('xG Difference')\n",
    "plt.ylabel('Points Per Match')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "bbc2fe8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', 'Pts/MP', 'Poss_x', 'Gls_x', 'Gls/90_x', 'Ast_x', 'Ast/90_x',\n",
       "       'G+A_x', 'G+A/90_x', 'npG_x', 'npG/90_x', 'PK_x', 'PKatt_x', 'CrdY_x',\n",
       "       'CrdR_x', 'xG_x', 'xG/90_x', 'npxG_x', 'npxG/90_x', 'xAG_x', 'xAG/90_x',\n",
       "       'npxG+xAG_x', 'npxG+xAG/90_x', 'PrgC_x', 'PrgP_x', 'G+A-PK_x',\n",
       "       'xG+xAG_x', 'Poss_y', 'Gls_y', 'Gls/90_y', 'Ast_y', 'Ast/90_y', 'G+A_y',\n",
       "       'G+A/90_y', 'npG_y', 'npG/90_y', 'PK_y', 'PKatt_y', 'CrdY_y', 'CrdR_y',\n",
       "       'xG_y', 'xG/90_y', 'npxG_y', 'npxG/90_y', 'xAG_y', 'xAG/90_y',\n",
       "       'npxG+xAG_y', 'npxG+xAG/90_y', 'PrgC_y', 'PrgP_y', 'G+A-PK_y',\n",
       "       'xG+xAG_y', 'xGD'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "dec42cdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#removed 'Squad' because string\n",
    "\n",
    "merged_df_no_squad = merged_df[['Pts/MP', 'Poss_x', 'Gls_x', 'Gls/90_x', 'Ast_x', 'Ast/90_x',\n",
    "       'G+A_x', 'G+A/90_x', 'npG_x', 'npG/90_x', 'PK_x', 'PKatt_x', 'CrdY_x',\n",
    "       'CrdR_x', 'xG_x', 'xG/90_x', 'npxG_x', 'npxG/90_x', 'xAG_x', 'xAG/90_x',\n",
    "       'npxG+xAG_x', 'npxG+xAG/90_x', 'PrgC_x', 'PrgP_x', 'G+A-PK_x',\n",
    "       'xG+xAG_x', 'Poss_y', 'Gls_y', 'Gls/90_y', 'Ast_y', 'Ast/90_y', 'G+A_y',\n",
    "       'G+A/90_y', 'npG_y', 'npG/90_y', 'PK_y', 'PKatt_y', 'CrdY_y', 'CrdR_y',\n",
    "       'xG_y', 'xG/90_y', 'npxG_y', 'npxG/90_y', 'xAG_y', 'xAG/90_y',\n",
    "       'npxG+xAG_y', 'npxG+xAG/90_y', 'PrgC_y', 'PrgP_y', 'G+A-PK_y',\n",
    "       'xG+xAG_y', 'xGD']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "cf840a67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#correlation matrix for variables in merged dataframe\n",
    "\n",
    "corr_matrix = merged_df_no_squad.corr()\n",
    "plt.figure(figsize = (10,6))\n",
    "sns.heatmap(corr_matrix, cmap = 'coolwarm', cbar = True, square = True, fmt = \".2f\")\n",
    "plt.title('Correlation Matrix Standard Stats and Points Per match')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "25b83650",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "xGD              0.902807\n",
      "xG_x             0.800664\n",
      "xG/90_x          0.800664\n",
      "xG+xAG_x         0.790292\n",
      "npxG/90_x        0.787149\n",
      "npxG_x           0.787149\n",
      "npxG+xAG/90_x    0.783211\n",
      "npxG+xAG_x       0.783211\n",
      "xAG/90_x         0.746007\n",
      "xAG_x            0.746007\n",
      "G+A_x            0.717039\n",
      "G+A/90_x         0.717039\n",
      "Gls/90_x         0.714764\n",
      "Gls_x            0.714764\n",
      "G+A-PK_x         0.689127\n",
      "Ast/90_x         0.671415\n",
      "Ast_x            0.671415\n",
      "npG/90_x         0.669258\n",
      "npG_x            0.669258\n",
      "PrgC_x           0.622496\n",
      "PrgP_x           0.605759\n",
      "CrdY_y           0.560772\n",
      "Poss_x           0.509522\n",
      "PK_x             0.341672\n",
      "PKatt_x          0.239291\n",
      "CrdR_y           0.203455\n",
      "PKatt_y         -0.124015\n",
      "CrdR_x          -0.152510\n",
      "PK_y            -0.177850\n",
      "CrdY_x          -0.234614\n",
      "PrgC_y          -0.477944\n",
      "Poss_y          -0.509522\n",
      "PrgP_y          -0.619258\n",
      "Ast_y           -0.713932\n",
      "Ast/90_y        -0.713932\n",
      "G+A-PK_y        -0.787486\n",
      "G+A/90_y        -0.788853\n",
      "G+A_y           -0.788853\n",
      "Gls_y           -0.821616\n",
      "Gls/90_y        -0.821616\n",
      "npG/90_y        -0.831530\n",
      "npG_y           -0.831530\n",
      "xAG/90_y        -0.845134\n",
      "xAG_y           -0.845134\n",
      "xG_y            -0.863594\n",
      "xG/90_y         -0.863594\n",
      "xG+xAG_y        -0.864027\n",
      "npxG+xAG/90_y   -0.865321\n",
      "npxG+xAG_y      -0.865321\n",
      "npxG_y          -0.872275\n",
      "npxG/90_y       -0.872275\n",
      "Name: Pts/MP, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#found correlation scores between variables and Points Per Match \n",
    "\n",
    "pts_mp_corr = corr_matrix['Pts/MP'].drop('Pts/MP', axis = 0)\n",
    "sorted_corr = pts_mp_corr.sort_values(ascending = False)\n",
    "print(sorted_corr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "5e708987",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#correlation matrix standard stats and points per match correlation to determine direction of relationship\n",
    "\n",
    "sorted_corr_df = sorted_corr.to_frame()\n",
    "plt.figure(figsize = (10,6))\n",
    "sns.heatmap(sorted_corr_df, cmap = 'coolwarm', cbar = True, square = True, fmt = \".2f\")\n",
    "plt.title('Correlation Matrix Standard Stats and Points Per match')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "37873e76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "xGD              0.902807\n",
      "npxG/90_y        0.872275\n",
      "npxG_y           0.872275\n",
      "npxG+xAG_y       0.865321\n",
      "npxG+xAG/90_y    0.865321\n",
      "xG+xAG_y         0.864027\n",
      "xG/90_y          0.863594\n",
      "xG_y             0.863594\n",
      "xAG_y            0.845134\n",
      "xAG/90_y         0.845134\n",
      "npG_y            0.831530\n",
      "npG/90_y         0.831530\n",
      "Gls/90_y         0.821616\n",
      "Gls_y            0.821616\n",
      "xG_x             0.800664\n",
      "xG/90_x          0.800664\n",
      "xG+xAG_x         0.790292\n",
      "G+A_y            0.788853\n",
      "G+A/90_y         0.788853\n",
      "G+A-PK_y         0.787486\n",
      "npxG/90_x        0.787149\n",
      "npxG_x           0.787149\n",
      "npxG+xAG/90_x    0.783211\n",
      "npxG+xAG_x       0.783211\n",
      "xAG/90_x         0.746007\n",
      "xAG_x            0.746007\n",
      "G+A_x            0.717039\n",
      "G+A/90_x         0.717039\n",
      "Gls/90_x         0.714764\n",
      "Gls_x            0.714764\n",
      "Ast/90_y         0.713932\n",
      "Ast_y            0.713932\n",
      "G+A-PK_x         0.689127\n",
      "Ast/90_x         0.671415\n",
      "Ast_x            0.671415\n",
      "npG/90_x         0.669258\n",
      "npG_x            0.669258\n",
      "PrgC_x           0.622496\n",
      "PrgP_y           0.619258\n",
      "PrgP_x           0.605759\n",
      "CrdY_y           0.560772\n",
      "Poss_x           0.509522\n",
      "Poss_y           0.509522\n",
      "PrgC_y           0.477944\n",
      "PK_x             0.341672\n",
      "PKatt_x          0.239291\n",
      "CrdY_x           0.234614\n",
      "CrdR_y           0.203455\n",
      "PK_y             0.177850\n",
      "CrdR_x           0.152510\n",
      "PKatt_y          0.124015\n",
      "Name: Pts/MP, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#found absolute correlation between variables and points per match to determine absolute strength of relationship, after having determined positive or negative\n",
    "\n",
    "pts_mp_corr_abs = corr_matrix['Pts/MP'].drop('Pts/MP', axis = 0)\n",
    "sorted_corr_abs = pts_mp_corr_abs.abs().sort_values(ascending = False)\n",
    "print(sorted_corr_abs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "44f54dfb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#correlation matrix of absolute relationship strength\n",
    "\n",
    "sorted_corr_abs_df = sorted_corr_abs.to_frame()\n",
    "plt.figure(figsize = (10,6))\n",
    "sns.heatmap(sorted_corr_abs_df, cmap = 'coolwarm', cbar = True, square = True, fmt = \".2f\")\n",
    "plt.title('Correlation Matrix Standard Stats and Points Per match')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1537740",
   "metadata": {},
   "source": [
    "# Variable Relationship to Pts/Match"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95bfaba6",
   "metadata": {},
   "source": [
    "| Very Strong Correlation (score > 0.8) | Score |\n",
    "| --------------------------- | ----- |\n",
    "| G+A/90_x    |     0.909661 |\n",
    "| G+A-PK_x     |    0.909025 |\n",
    "| npG/90_x      |   0.906727 |\n",
    "| Gls/90_x       |  0.904347 |\n",
    "| G+A_x           | 0.891725 |\n",
    "| Gls_x            |0.889611 |\n",
    "| Ast/90_x         |0.888820 |\n",
    "| npG_x            |0.883582 |\n",
    "| PrgP_x           |0.881868 |\n",
    "| Gls_y            |0.871455 |\n",
    "| xG+xAG_x         |0.869942 |\n",
    "| xAG/90_x         |0.867281 |\n",
    "| Ast_x            |0.866410 |\n",
    "| npxG+xAG/90_x    |0.865569 |\n",
    "| G+A_y            |0.858880 |\n",
    "| xAG_x            |0.858780 |\n",
    "| Gls/90_y         |0.858194 |\n",
    "| npxG+xAG_x       |0.854070 |\n",
    "| xG/90_x          |0.853189 |\n",
    "| xG_x             |0.852134 |\n",
    "| npxG/90_x        |0.850465 |\n",
    "| npG_y            |0.845521 |\n",
    "| G+A/90_y         |0.845315 |\n",
    "| xGD              |0.839989 |\n",
    "| npxG_x           |0.837813 |\n",
    "| Poss_y           |0.835468 |\n",
    "| Poss_x           |0.835468 |\n",
    "| npG/90_y         |0.827287 |\n",
    "| G+A-PK_y         |0.824710 |\n",
    "| Ast_y            |0.818732 |\n",
    "|Ast/90_y         |0.804964 |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7988e7b2",
   "metadata": {},
   "source": [
    "|Strong Correlation (0.6 < score < 0.8)| Score|\n",
    "|--------------------------------- | -----|\n",
    "| PrgC_x  |         0.788839 |\n",
    "| PrgP_y   |        0.731340 |\n",
    "| PrgC_y    |       0.684010 |\n",
    "| xG_y       |      0.678272 |\n",
    "| xG/90_y     |     0.665494 |\n",
    "| npxG_y       |    0.660448 |\n",
    "| npxG+xAG_y    |   0.657007 |\n",
    "| xG+xAG_y       |  0.654186 |\n",
    "| xAG_y           | 0.643300 |\n",
    "| npxG/90_y        |0.640327 |\n",
    "| npxG+xAG/90_y    |0.640070 |\n",
    "| xAG/90_y         |0.629426 |\n",
    "| CrdY_y           |0.604982 |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa3df0cd",
   "metadata": {},
   "source": [
    "## Now that we know what variables have a (Very) Strong Relationship to Points Per Match, we want to build a model that will use these relationships to build an analyzer tool and predictor model."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
