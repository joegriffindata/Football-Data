{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "74da6e9a-72fa-4df6-97f7-68c16a057665",
   "metadata": {},
   "source": [
    "# Premier League Team Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "ba0c4dfe",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "2ad57071",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_html('https://fbref.com/en/comps/9/Premier-League-Stats')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "6e0ffe1e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "table_index = 0\n",
    "table_index_for = 2\n",
    "table_index_against = 3\n",
    "df_table = df[table_index]\n",
    "df_standard_for = df[table_index_for]\n",
    "df_standard_against = df[table_index_against]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "b577e228",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0_level_0</th>\n",
       "      <th>Unnamed: 1_level_0</th>\n",
       "      <th>Unnamed: 2_level_0</th>\n",
       "      <th>Unnamed: 3_level_0</th>\n",
       "      <th colspan=\"4\" halign=\"left\">Playing Time</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Performance</th>\n",
       "      <th>...</th>\n",
       "      <th colspan=\"10\" halign=\"left\">Per 90 Minutes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th># Pl</th>\n",
       "      <th>Age</th>\n",
       "      <th>Poss</th>\n",
       "      <th>MP</th>\n",
       "      <th>Starts</th>\n",
       "      <th>Min</th>\n",
       "      <th>90s</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>...</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xG+xAG</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>23</td>\n",
       "      <td>26.4</td>\n",
       "      <td>50.1</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>16</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>1.6</td>\n",
       "      <td>1.3</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.6</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.17</td>\n",
       "      <td>2.72</td>\n",
       "      <td>1.55</td>\n",
       "      <td>2.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aston Villa</td>\n",
       "      <td>21</td>\n",
       "      <td>27.2</td>\n",
       "      <td>51.9</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>16</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>1.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1.19</td>\n",
       "      <td>2.69</td>\n",
       "      <td>1.50</td>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>23</td>\n",
       "      <td>25.8</td>\n",
       "      <td>43.8</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>1.62</td>\n",
       "      <td>1.19</td>\n",
       "      <td>2.82</td>\n",
       "      <td>1.47</td>\n",
       "      <td>2.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brentford</td>\n",
       "      <td>20</td>\n",
       "      <td>26.4</td>\n",
       "      <td>46.7</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>19</td>\n",
       "      <td>11</td>\n",
       "      <td>...</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1.1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.7</td>\n",
       "      <td>2.8</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.10</td>\n",
       "      <td>2.78</td>\n",
       "      <td>1.51</td>\n",
       "      <td>2.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Brighton</td>\n",
       "      <td>27</td>\n",
       "      <td>26.1</td>\n",
       "      <td>55.2</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>17</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>1.7</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.7</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.42</td>\n",
       "      <td>0.97</td>\n",
       "      <td>2.38</td>\n",
       "      <td>1.42</td>\n",
       "      <td>2.38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Unnamed: 0_level_0 Unnamed: 1_level_0 Unnamed: 2_level_0 Unnamed: 3_level_0  \\\n",
       "               Squad               # Pl                Age               Poss   \n",
       "0            Arsenal                 23               26.4               50.1   \n",
       "1        Aston Villa                 21               27.2               51.9   \n",
       "2        Bournemouth                 23               25.8               43.8   \n",
       "3          Brentford                 20               26.4               46.7   \n",
       "4           Brighton                 27               26.1               55.2   \n",
       "\n",
       "  Playing Time                   Performance      ... Per 90 Minutes       \\\n",
       "            MP Starts  Min   90s         Gls Ast  ...            Gls  Ast   \n",
       "0           10    110  900  10.0          16  13  ...            1.6  1.3   \n",
       "1           10    110  900  10.0          16  14  ...            1.6  1.4   \n",
       "2           10    110  900  10.0          13  11  ...            1.3  1.1   \n",
       "3           10    110  900  10.0          19  11  ...            1.9  1.1   \n",
       "4           10    110  900  10.0          17  12  ...            1.7  1.2   \n",
       "\n",
       "                                                      \n",
       "   G+A G-PK G+A-PK    xG   xAG xG+xAG  npxG npxG+xAG  \n",
       "0  2.9  1.6    2.9  1.55  1.17   2.72  1.55     2.72  \n",
       "1  3.0  1.6    3.0  1.50  1.19   2.69  1.50     2.69  \n",
       "2  2.4  1.2    2.3  1.62  1.19   2.82  1.47     2.66  \n",
       "3  3.0  1.7    2.8  1.67  1.10   2.78  1.51     2.62  \n",
       "4  2.9  1.7    2.9  1.42  0.97   2.38  1.42     2.38  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_standard_for.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "fcce9c90",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultiIndex([('Unnamed: 0_level_0',    'Squad'),\n",
       "            ('Unnamed: 1_level_0',     '# Pl'),\n",
       "            ('Unnamed: 2_level_0',      'Age'),\n",
       "            ('Unnamed: 3_level_0',     'Poss'),\n",
       "            (      'Playing Time',       'MP'),\n",
       "            (      'Playing Time',   'Starts'),\n",
       "            (      'Playing Time',      'Min'),\n",
       "            (      'Playing Time',      '90s'),\n",
       "            (       'Performance',      'Gls'),\n",
       "            (       'Performance',      'Ast'),\n",
       "            (       'Performance',      'G+A'),\n",
       "            (       'Performance',     'G-PK'),\n",
       "            (       'Performance',       'PK'),\n",
       "            (       'Performance',    'PKatt'),\n",
       "            (       'Performance',     'CrdY'),\n",
       "            (       'Performance',     'CrdR'),\n",
       "            (          'Expected',       'xG'),\n",
       "            (          'Expected',     'npxG'),\n",
       "            (          'Expected',      'xAG'),\n",
       "            (          'Expected', 'npxG+xAG'),\n",
       "            (       'Progression',     'PrgC'),\n",
       "            (       'Progression',     'PrgP'),\n",
       "            (    'Per 90 Minutes',      'Gls'),\n",
       "            (    'Per 90 Minutes',      'Ast'),\n",
       "            (    'Per 90 Minutes',      'G+A'),\n",
       "            (    'Per 90 Minutes',     'G-PK'),\n",
       "            (    'Per 90 Minutes',   'G+A-PK'),\n",
       "            (    'Per 90 Minutes',       'xG'),\n",
       "            (    'Per 90 Minutes',      'xAG'),\n",
       "            (    'Per 90 Minutes',   'xG+xAG'),\n",
       "            (    'Per 90 Minutes',     'npxG'),\n",
       "            (    'Per 90 Minutes', 'npxG+xAG')],\n",
       "           )"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_standard_for.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "1fcd21a2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', '# Pl', 'Age', 'Poss', 'MP', 'Starts', 'Min', '90s', 'Gls',\n",
       "       'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG',\n",
       "       'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'Gls', 'Ast', 'G+A', 'G-PK',\n",
       "       'G+A-PK', 'xG', 'xAG', 'xG+xAG', 'npxG', 'npxG+xAG'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_levels = df_standard_for.columns.nlevels\n",
    "if num_levels > 1:\n",
    "    df_standard_for.columns = df_standard_for.columns.droplevel(0)\n",
    "\n",
    "df_standard_for.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "4a666f5d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', '# Pl', 'Age', 'Poss', 'MP', 'Starts', 'Min', '90s', 'Gls',\n",
       "       'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG',\n",
       "       'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'Gls', 'Ast', 'G+A', 'G-PK',\n",
       "       'G+A-PK', 'xG', 'xAG', 'xG+xAG', 'npxG', 'npxG+xAG'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_levels = df_standard_against.columns.nlevels\n",
    "if num_levels > 1:\n",
    "    df_standard_against.columns = df_standard_against.columns.droplevel(0)\n",
    "\n",
    "df_standard_against.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "ac29cf72",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th># Pl</th>\n",
       "      <th>Age</th>\n",
       "      <th>Poss</th>\n",
       "      <th>MP</th>\n",
       "      <th>Starts</th>\n",
       "      <th>Min</th>\n",
       "      <th>90s</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>...</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xG+xAG</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>vs Arsenal</td>\n",
       "      <td>23</td>\n",
       "      <td>26.4</td>\n",
       "      <td>49.9</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>11</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.8</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.04</td>\n",
       "      <td>0.68</td>\n",
       "      <td>1.72</td>\n",
       "      <td>0.96</td>\n",
       "      <td>1.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>vs Aston Villa</td>\n",
       "      <td>21</td>\n",
       "      <td>27.1</td>\n",
       "      <td>48.1</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.13</td>\n",
       "      <td>0.80</td>\n",
       "      <td>1.93</td>\n",
       "      <td>0.97</td>\n",
       "      <td>1.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>vs Bournemouth</td>\n",
       "      <td>23</td>\n",
       "      <td>27.0</td>\n",
       "      <td>56.2</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1.2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1.29</td>\n",
       "      <td>1.02</td>\n",
       "      <td>2.31</td>\n",
       "      <td>1.29</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>vs Brentford</td>\n",
       "      <td>20</td>\n",
       "      <td>27.4</td>\n",
       "      <td>53.3</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>19</td>\n",
       "      <td>17</td>\n",
       "      <td>...</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1.7</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.9</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.67</td>\n",
       "      <td>1.31</td>\n",
       "      <td>2.99</td>\n",
       "      <td>1.67</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>vs Brighton</td>\n",
       "      <td>27</td>\n",
       "      <td>26.6</td>\n",
       "      <td>44.8</td>\n",
       "      <td>10</td>\n",
       "      <td>110</td>\n",
       "      <td>900</td>\n",
       "      <td>10.0</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2.2</td>\n",
       "      <td>1.62</td>\n",
       "      <td>1.31</td>\n",
       "      <td>2.94</td>\n",
       "      <td>1.47</td>\n",
       "      <td>2.78</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Squad  # Pl   Age  Poss  MP  Starts  Min   90s  Gls  Ast  ...  \\\n",
       "0      vs Arsenal    23  26.4  49.9  10     110  900  10.0   11    8  ...   \n",
       "1  vs Aston Villa    21  27.1  48.1  10     110  900  10.0   15   10  ...   \n",
       "2  vs Bournemouth    23  27.0  56.2  10     110  900  10.0   12   10  ...   \n",
       "3    vs Brentford    20  27.4  53.3  10     110  900  10.0   19   17  ...   \n",
       "4     vs Brighton    27  26.6  44.8  10     110  900  10.0   14   10  ...   \n",
       "\n",
       "   Gls  Ast  G+A  G-PK  G+A-PK    xG   xAG  xG+xAG  npxG  npxG+xAG  \n",
       "0  1.1  0.8  1.9   1.0     1.8  1.04  0.68    1.72  0.96      1.64  \n",
       "1  1.5  1.0  2.5   1.4     2.4  1.13  0.80    1.93  0.97      1.77  \n",
       "2  1.2  1.0  2.2   1.2     2.2  1.29  1.02    2.31  1.29      2.31  \n",
       "3  1.9  1.7  3.6   1.9     3.6  1.67  1.31    2.99  1.67      2.99  \n",
       "4  1.4  1.0  2.4   1.2     2.2  1.62  1.31    2.94  1.47      2.78  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_standard_against.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "41b5cbcf-9a6d-4974-80f6-ccdbb7ef2bcf",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rk</th>\n",
       "      <th>Squad</th>\n",
       "      <th>MP</th>\n",
       "      <th>W</th>\n",
       "      <th>D</th>\n",
       "      <th>L</th>\n",
       "      <th>GF</th>\n",
       "      <th>GA</th>\n",
       "      <th>GD</th>\n",
       "      <th>Pts</th>\n",
       "      <th>Pts/MP</th>\n",
       "      <th>xG</th>\n",
       "      <th>xGA</th>\n",
       "      <th>xGD</th>\n",
       "      <th>xGD/90</th>\n",
       "      <th>Last 5</th>\n",
       "      <th>Attendance</th>\n",
       "      <th>Top Team Scorer</th>\n",
       "      <th>Goalkeeper</th>\n",
       "      <th>Notes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Liverpool</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>18.1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>W W W D W</td>\n",
       "      <td>60263</td>\n",
       "      <td>Mohamed Salah - 7</td>\n",
       "      <td>Alisson</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Manchester City</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>23</td>\n",
       "      <td>2.3</td>\n",
       "      <td>19.9</td>\n",
       "      <td>10.8</td>\n",
       "      <td>9.1</td>\n",
       "      <td>0.91</td>\n",
       "      <td>D W W W L</td>\n",
       "      <td>52800</td>\n",
       "      <td>Erling Haaland - 11</td>\n",
       "      <td>Ederson</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Nott'ham Forest</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>13.6</td>\n",
       "      <td>9.5</td>\n",
       "      <td>4.1</td>\n",
       "      <td>0.41</td>\n",
       "      <td>L D W W W</td>\n",
       "      <td>29875</td>\n",
       "      <td>Chris Wood - 8</td>\n",
       "      <td>Matz Sels</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Chelsea</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>12</td>\n",
       "      <td>8</td>\n",
       "      <td>18</td>\n",
       "      <td>1.8</td>\n",
       "      <td>18.1</td>\n",
       "      <td>13.5</td>\n",
       "      <td>4.6</td>\n",
       "      <td>0.46</td>\n",
       "      <td>W D L W D</td>\n",
       "      <td>39528</td>\n",
       "      <td>Cole Palmer - 7</td>\n",
       "      <td>Robert SÃ¡nchez</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Arsenal</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>18</td>\n",
       "      <td>1.8</td>\n",
       "      <td>15.5</td>\n",
       "      <td>10.4</td>\n",
       "      <td>5.1</td>\n",
       "      <td>0.51</td>\n",
       "      <td>W W L D L</td>\n",
       "      <td>60320</td>\n",
       "      <td>Kai Havertz - 4</td>\n",
       "      <td>David Raya</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rk            Squad  MP  W  D  L  GF  GA  GD  Pts  Pts/MP    xG   xGA  \\\n",
       "0   1        Liverpool  10  8  1  1  19   6  13   25     2.5  18.1   8.0   \n",
       "1   2  Manchester City  10  7  2  1  21  11  10   23     2.3  19.9  10.8   \n",
       "2   3  Nott'ham Forest  10  5  4  1  14   7   7   19     1.9  13.6   9.5   \n",
       "3   4          Chelsea  10  5  3  2  20  12   8   18     1.8  18.1  13.5   \n",
       "4   5          Arsenal  10  5  3  2  17  11   6   18     1.8  15.5  10.4   \n",
       "\n",
       "    xGD  xGD/90     Last 5  Attendance      Top Team Scorer      Goalkeeper  \\\n",
       "0  10.0    1.00  W W W D W       60263    Mohamed Salah - 7         Alisson   \n",
       "1   9.1    0.91  D W W W L       52800  Erling Haaland - 11         Ederson   \n",
       "2   4.1    0.41  L D W W W       29875       Chris Wood - 8       Matz Sels   \n",
       "3   4.6    0.46  W D L W D       39528      Cole Palmer - 7  Robert SÃ¡nchez   \n",
       "4   5.1    0.51  W W L D L       60320      Kai Havertz - 4      David Raya   \n",
       "\n",
       "   Notes  \n",
       "0    NaN  \n",
       "1    NaN  \n",
       "2    NaN  \n",
       "3    NaN  \n",
       "4    NaN  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_table.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "f16c026c-2c1d-43cc-a920-57ffe2effbd2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#drop unwanted columns\n",
    "#create per 90 stats for things like goals, assists, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "3dd33b59-84fd-4a56-95d9-6c3cf9747f43",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Rk', 'Squad', 'MP', 'W', 'D', 'L', 'GF', 'GA', 'GD', 'Pts', 'Pts/MP',\n",
       "       'xG', 'xGA', 'xGD', 'xGD/90', 'Last 5', 'Attendance', 'Top Team Scorer',\n",
       "       'Goalkeeper', 'Notes'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_table.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "663cd8ef-c474-4a95-8f97-7dbc29d13244",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', '# Pl', 'Age', 'Poss', 'MP', 'Starts', 'Min', '90s', 'Gls',\n",
       "       'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG',\n",
       "       'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'Gls', 'Ast', 'G+A', 'G-PK',\n",
       "       'G+A-PK', 'xG', 'xAG', 'xG+xAG', 'npxG', 'npxG+xAG'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_standard_for.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "9cf92ea7-3948-4b7f-866d-0f4b2a65e48d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', '# Pl', 'Age', 'Poss', 'MP', 'Starts', 'Min', '90s', 'Gls',\n",
       "       'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG',\n",
       "       'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'Gls', 'Ast', 'G+A', 'G-PK',\n",
       "       'G+A-PK', 'xG', 'xAG', 'xG+xAG', 'npxG', 'npxG+xAG'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_standard_against.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "0aa5340d-f4d6-4216-9d04-b5e2dce6f577",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "selected_table = df_table[['Rk', 'Squad', 'MP', 'W', 'D', 'L', 'GF', 'GA', 'GD', 'Pts', 'Pts/MP',\n",
    "       'xG', 'xGA', 'xGD', 'xGD/90']]\n",
    "selected_for = df_standard_for[['Squad', 'Poss', 'Gls', 'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG', 'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'G+A-PK', 'xG+xAG']]\n",
    "selected_against = df_standard_against[['Squad', 'Poss', 'Gls', 'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG', 'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'G+A-PK', 'xG+xAG']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "31a44d8d-ad36-48ef-8866-fbae5d75a591",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rk</th>\n",
       "      <th>Squad</th>\n",
       "      <th>MP</th>\n",
       "      <th>W</th>\n",
       "      <th>D</th>\n",
       "      <th>L</th>\n",
       "      <th>GF</th>\n",
       "      <th>GA</th>\n",
       "      <th>GD</th>\n",
       "      <th>Pts</th>\n",
       "      <th>Pts/MP</th>\n",
       "      <th>xG</th>\n",
       "      <th>xGA</th>\n",
       "      <th>xGD</th>\n",
       "      <th>xGD/90</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Liverpool</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>18.1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Manchester City</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>23</td>\n",
       "      <td>2.3</td>\n",
       "      <td>19.9</td>\n",
       "      <td>10.8</td>\n",
       "      <td>9.1</td>\n",
       "      <td>0.91</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rk            Squad  MP  W  D  L  GF  GA  GD  Pts  Pts/MP    xG   xGA  \\\n",
       "0   1        Liverpool  10  8  1  1  19   6  13   25     2.5  18.1   8.0   \n",
       "1   2  Manchester City  10  7  2  1  21  11  10   23     2.3  19.9  10.8   \n",
       "\n",
       "    xGD  xGD/90  \n",
       "0  10.0    1.00  \n",
       "1   9.1    0.91  "
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_table.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "2c358780-6475-40f1-87ba-ce37d2152bf0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>...</td>\n",
       "      <td>15.5</td>\n",
       "      <td>1.55</td>\n",
       "      <td>11.7</td>\n",
       "      <td>1.17</td>\n",
       "      <td>27.2</td>\n",
       "      <td>2.72</td>\n",
       "      <td>192</td>\n",
       "      <td>413</td>\n",
       "      <td>2.9</td>\n",
       "      <td>2.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aston Villa</td>\n",
       "      <td>51.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>30</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>11.9</td>\n",
       "      <td>1.19</td>\n",
       "      <td>26.9</td>\n",
       "      <td>2.69</td>\n",
       "      <td>184</td>\n",
       "      <td>340</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Squad  Poss  Gls  Gls  Ast  Ast  G+A  G+A  G-PK  G-PK  ...  npxG  \\\n",
       "0      Arsenal  50.1   16  1.6   13  1.3   29  2.9    16   1.6  ...  15.5   \n",
       "1  Aston Villa  51.9   16  1.6   14  1.4   30  3.0    16   1.6  ...  15.0   \n",
       "\n",
       "   npxG   xAG   xAG  npxG+xAG  npxG+xAG  PrgC  PrgP  G+A-PK  xG+xAG  \n",
       "0  1.55  11.7  1.17      27.2      2.72   192   413     2.9    2.72  \n",
       "1  1.50  11.9  1.19      26.9      2.69   184   340     3.0    2.69  \n",
       "\n",
       "[2 rows x 26 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_for.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "da59c702-cce6-4558-8616-31f3315ae5d0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>vs Arsenal</td>\n",
       "      <td>49.9</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.8</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>vs Aston Villa</td>\n",
       "      <td>48.1</td>\n",
       "      <td>15</td>\n",
       "      <td>1.5</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>...</td>\n",
       "      <td>9.7</td>\n",
       "      <td>0.97</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.80</td>\n",
       "      <td>17.7</td>\n",
       "      <td>1.77</td>\n",
       "      <td>170</td>\n",
       "      <td>314</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.93</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Squad  Poss  Gls  Gls  Ast  Ast  G+A  G+A  G-PK  G-PK  ...  npxG  \\\n",
       "0      vs Arsenal  49.9   11  1.1    8  0.8   19  1.9    10   1.0  ...   9.6   \n",
       "1  vs Aston Villa  48.1   15  1.5   10  1.0   25  2.5    14   1.4  ...   9.7   \n",
       "\n",
       "   npxG  xAG   xAG  npxG+xAG  npxG+xAG  PrgC  PrgP  G+A-PK  xG+xAG  \n",
       "0  0.96  6.8  0.68      16.4      1.64   213   317     1.8    1.72  \n",
       "1  0.97  8.0  0.80      17.7      1.77   170   314     2.4    1.93  \n",
       "\n",
       "[2 rows x 26 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_against.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "fb3f9e7f-3131-49c6-938e-61367989fe69",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/jp/3fktnqd5023f4kfkp0wgrq4w0000gn/T/ipykernel_4633/3789773916.py:1: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>G-PK</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>49.9</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.8</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aston Villa</td>\n",
       "      <td>48.1</td>\n",
       "      <td>15</td>\n",
       "      <td>1.5</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>...</td>\n",
       "      <td>9.7</td>\n",
       "      <td>0.97</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.80</td>\n",
       "      <td>17.7</td>\n",
       "      <td>1.77</td>\n",
       "      <td>170</td>\n",
       "      <td>314</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>56.2</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>22</td>\n",
       "      <td>2.2</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>...</td>\n",
       "      <td>12.9</td>\n",
       "      <td>1.29</td>\n",
       "      <td>10.2</td>\n",
       "      <td>1.02</td>\n",
       "      <td>23.1</td>\n",
       "      <td>2.31</td>\n",
       "      <td>191</td>\n",
       "      <td>359</td>\n",
       "      <td>2.2</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brentford</td>\n",
       "      <td>53.3</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>17</td>\n",
       "      <td>1.7</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>...</td>\n",
       "      <td>16.7</td>\n",
       "      <td>1.67</td>\n",
       "      <td>13.1</td>\n",
       "      <td>1.31</td>\n",
       "      <td>29.9</td>\n",
       "      <td>2.99</td>\n",
       "      <td>228</td>\n",
       "      <td>463</td>\n",
       "      <td>3.6</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Brighton</td>\n",
       "      <td>44.8</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>24</td>\n",
       "      <td>2.4</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>...</td>\n",
       "      <td>14.7</td>\n",
       "      <td>1.47</td>\n",
       "      <td>13.1</td>\n",
       "      <td>1.31</td>\n",
       "      <td>27.8</td>\n",
       "      <td>2.78</td>\n",
       "      <td>156</td>\n",
       "      <td>307</td>\n",
       "      <td>2.2</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Squad  Poss  Gls  Gls  Ast  Ast  G+A  G+A  G-PK  G-PK  ...  npxG  \\\n",
       "0      Arsenal  49.9   11  1.1    8  0.8   19  1.9    10   1.0  ...   9.6   \n",
       "1  Aston Villa  48.1   15  1.5   10  1.0   25  2.5    14   1.4  ...   9.7   \n",
       "2  Bournemouth  56.2   12  1.2   10  1.0   22  2.2    12   1.2  ...  12.9   \n",
       "3    Brentford  53.3   19  1.9   17  1.7   36  3.6    19   1.9  ...  16.7   \n",
       "4     Brighton  44.8   14  1.4   10  1.0   24  2.4    12   1.2  ...  14.7   \n",
       "\n",
       "   npxG   xAG   xAG  npxG+xAG  npxG+xAG  PrgC  PrgP  G+A-PK  xG+xAG  \n",
       "0  0.96   6.8  0.68      16.4      1.64   213   317     1.8    1.72  \n",
       "1  0.97   8.0  0.80      17.7      1.77   170   314     2.4    1.93  \n",
       "2  1.29  10.2  1.02      23.1      2.31   191   359     2.2    2.31  \n",
       "3  1.67  13.1  1.31      29.9      2.99   228   463     3.6    2.99  \n",
       "4  1.47  13.1  1.31      27.8      2.78   156   307     2.2    2.94  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_against['Squad'] = selected_for['Squad'].str.replace('vs ', '', regex = False)\n",
    "selected_against.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "4318e82c-afbe-47a2-a2a3-7a55fc095f9c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', 'Poss', 'Gls', 'Gls', 'Ast', 'Ast', 'G+A', 'G+A', 'G-PK',\n",
       "       'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'xG', 'npxG', 'npxG',\n",
       "       'xAG', 'xAG', 'npxG+xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'G+A-PK',\n",
       "       'xG+xAG'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_for.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "1f82f42a-a74e-4f8b-b1ed-7ae31ddc0896",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index: 0, Column Name: Squad\n",
      "Index: 1, Column Name: Poss\n",
      "Index: 2, Column Name: Gls\n",
      "Index: 3, Column Name: Gls\n",
      "Index: 4, Column Name: Ast\n",
      "Index: 5, Column Name: Ast\n",
      "Index: 6, Column Name: G+A\n",
      "Index: 7, Column Name: G+A\n",
      "Index: 8, Column Name: G-PK\n",
      "Index: 9, Column Name: G-PK\n",
      "Index: 10, Column Name: PK\n",
      "Index: 11, Column Name: PKatt\n",
      "Index: 12, Column Name: CrdY\n",
      "Index: 13, Column Name: CrdR\n",
      "Index: 14, Column Name: xG\n",
      "Index: 15, Column Name: xG\n",
      "Index: 16, Column Name: npxG\n",
      "Index: 17, Column Name: npxG\n",
      "Index: 18, Column Name: xAG\n",
      "Index: 19, Column Name: xAG\n",
      "Index: 20, Column Name: npxG+xAG\n",
      "Index: 21, Column Name: npxG+xAG\n",
      "Index: 22, Column Name: PrgC\n",
      "Index: 23, Column Name: PrgP\n",
      "Index: 24, Column Name: G+A-PK\n",
      "Index: 25, Column Name: xG+xAG\n"
     ]
    }
   ],
   "source": [
    "for index, column_name in enumerate(selected_for.columns):\n",
    "    print(f\"Index: {index}, Column Name: {column_name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "d92d1591-994a-4677-a1bd-d08ce869bfa3",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "new_col_for = {\n",
    "    'G-PK': 'npG',\n",
    "}\n",
    "\n",
    "selected_for = selected_for.rename(columns=new_col_for)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "e975f4d1-279d-4ec2-88fa-23d9331e64a3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls/90</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast/90</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A/90</th>\n",
       "      <th>npG</th>\n",
       "      <th>npG/90</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG/90</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG/90</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG/90</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>...</td>\n",
       "      <td>15.5</td>\n",
       "      <td>1.55</td>\n",
       "      <td>11.7</td>\n",
       "      <td>1.17</td>\n",
       "      <td>27.2</td>\n",
       "      <td>2.72</td>\n",
       "      <td>192</td>\n",
       "      <td>413</td>\n",
       "      <td>2.9</td>\n",
       "      <td>2.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aston Villa</td>\n",
       "      <td>51.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>30</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>...</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.50</td>\n",
       "      <td>11.9</td>\n",
       "      <td>1.19</td>\n",
       "      <td>26.9</td>\n",
       "      <td>2.69</td>\n",
       "      <td>184</td>\n",
       "      <td>340</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>43.8</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>24</td>\n",
       "      <td>2.4</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>...</td>\n",
       "      <td>14.7</td>\n",
       "      <td>1.47</td>\n",
       "      <td>11.9</td>\n",
       "      <td>1.19</td>\n",
       "      <td>26.6</td>\n",
       "      <td>2.66</td>\n",
       "      <td>184</td>\n",
       "      <td>388</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brentford</td>\n",
       "      <td>46.7</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>30</td>\n",
       "      <td>3.0</td>\n",
       "      <td>17</td>\n",
       "      <td>1.7</td>\n",
       "      <td>...</td>\n",
       "      <td>15.1</td>\n",
       "      <td>1.51</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1.10</td>\n",
       "      <td>26.2</td>\n",
       "      <td>2.62</td>\n",
       "      <td>147</td>\n",
       "      <td>347</td>\n",
       "      <td>2.8</td>\n",
       "      <td>2.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Brighton</td>\n",
       "      <td>55.2</td>\n",
       "      <td>17</td>\n",
       "      <td>1.7</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>17</td>\n",
       "      <td>1.7</td>\n",
       "      <td>...</td>\n",
       "      <td>14.2</td>\n",
       "      <td>1.42</td>\n",
       "      <td>9.7</td>\n",
       "      <td>0.97</td>\n",
       "      <td>23.8</td>\n",
       "      <td>2.38</td>\n",
       "      <td>215</td>\n",
       "      <td>470</td>\n",
       "      <td>2.9</td>\n",
       "      <td>2.38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Squad  Poss  Gls  Gls/90  Ast  Ast/90  G+A  G+A/90  npG  npG/90  ...  \\\n",
       "0      Arsenal  50.1   16     1.6   13     1.3   29     2.9   16     1.6  ...   \n",
       "1  Aston Villa  51.9   16     1.6   14     1.4   30     3.0   16     1.6  ...   \n",
       "2  Bournemouth  43.8   13     1.3   11     1.1   24     2.4   12     1.2  ...   \n",
       "3    Brentford  46.7   19     1.9   11     1.1   30     3.0   17     1.7  ...   \n",
       "4     Brighton  55.2   17     1.7   12     1.2   29     2.9   17     1.7  ...   \n",
       "\n",
       "   npxG  npxG/90   xAG  xAG/90  npxG+xAG  npxG+xAG/90  PrgC  PrgP  G+A-PK  \\\n",
       "0  15.5     1.55  11.7    1.17      27.2         2.72   192   413     2.9   \n",
       "1  15.0     1.50  11.9    1.19      26.9         2.69   184   340     3.0   \n",
       "2  14.7     1.47  11.9    1.19      26.6         2.66   184   388     2.3   \n",
       "3  15.1     1.51  11.0    1.10      26.2         2.62   147   347     2.8   \n",
       "4  14.2     1.42   9.7    0.97      23.8         2.38   215   470     2.9   \n",
       "\n",
       "   xG+xAG  \n",
       "0    2.72  \n",
       "1    2.69  \n",
       "2    2.82  \n",
       "3    2.78  \n",
       "4    2.38  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def rename_columns_with_suffix(selected_for):\n",
    "    new_columns = [] \n",
    "    seen_columns = set()  \n",
    "    for col_index, column_name in enumerate(selected_for.columns):\n",
    "        if column_name in seen_columns:\n",
    "            new_column_name = f'{column_name}/90'\n",
    "        else:\n",
    "            new_column_name = column_name\n",
    "        new_columns.append(new_column_name)\n",
    "        seen_columns.add(column_name)  \n",
    "    selected_for.columns = new_columns \n",
    "\n",
    "rename_columns_with_suffix(selected_for)\n",
    "\n",
    "selected_for.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "579ffa4f-ca12-407d-8d99-38bc417c2efc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index: 0, Column Name: Squad\n",
      "Index: 1, Column Name: Poss\n",
      "Index: 2, Column Name: Gls\n",
      "Index: 3, Column Name: Gls/90\n",
      "Index: 4, Column Name: Ast\n",
      "Index: 5, Column Name: Ast/90\n",
      "Index: 6, Column Name: G+A\n",
      "Index: 7, Column Name: G+A/90\n",
      "Index: 8, Column Name: npG\n",
      "Index: 9, Column Name: npG/90\n",
      "Index: 10, Column Name: PK\n",
      "Index: 11, Column Name: PKatt\n",
      "Index: 12, Column Name: CrdY\n",
      "Index: 13, Column Name: CrdR\n",
      "Index: 14, Column Name: xG\n",
      "Index: 15, Column Name: xG/90\n",
      "Index: 16, Column Name: npxG\n",
      "Index: 17, Column Name: npxG/90\n",
      "Index: 18, Column Name: xAG\n",
      "Index: 19, Column Name: xAG/90\n",
      "Index: 20, Column Name: npxG+xAG\n",
      "Index: 21, Column Name: npxG+xAG/90\n",
      "Index: 22, Column Name: PrgC\n",
      "Index: 23, Column Name: PrgP\n",
      "Index: 24, Column Name: G+A-PK\n",
      "Index: 25, Column Name: xG+xAG\n"
     ]
    }
   ],
   "source": [
    "for index, column_name in enumerate(selected_for.columns):\n",
    "    print(f\"Index: {index}, Column Name: {column_name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "61817230-4c53-4727-9623-4bc72484a9a0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index: 0, Column Name: Squad\n",
      "Index: 1, Column Name: Poss\n",
      "Index: 2, Column Name: Gls\n",
      "Index: 3, Column Name: Gls\n",
      "Index: 4, Column Name: Ast\n",
      "Index: 5, Column Name: Ast\n",
      "Index: 6, Column Name: G+A\n",
      "Index: 7, Column Name: G+A\n",
      "Index: 8, Column Name: G-PK\n",
      "Index: 9, Column Name: G-PK\n",
      "Index: 10, Column Name: PK\n",
      "Index: 11, Column Name: PKatt\n",
      "Index: 12, Column Name: CrdY\n",
      "Index: 13, Column Name: CrdR\n",
      "Index: 14, Column Name: xG\n",
      "Index: 15, Column Name: xG\n",
      "Index: 16, Column Name: npxG\n",
      "Index: 17, Column Name: npxG\n",
      "Index: 18, Column Name: xAG\n",
      "Index: 19, Column Name: xAG\n",
      "Index: 20, Column Name: npxG+xAG\n",
      "Index: 21, Column Name: npxG+xAG\n",
      "Index: 22, Column Name: PrgC\n",
      "Index: 23, Column Name: PrgP\n",
      "Index: 24, Column Name: G+A-PK\n",
      "Index: 25, Column Name: xG+xAG\n"
     ]
    }
   ],
   "source": [
    "for index, column_name in enumerate(selected_against.columns):\n",
    "    print(f\"Index: {index}, Column Name: {column_name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "7feee306-94a6-4374-b7c1-bfd32d6e1705",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "new_col_against = {\n",
    "    'G-PK': 'npG',\n",
    "}\n",
    "selected_against = selected_against.rename(columns=new_col_against)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "d8e8bcb0-1cce-46c8-b24e-fb6e507aa08c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls/90</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast/90</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A/90</th>\n",
       "      <th>npG</th>\n",
       "      <th>npG/90</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG/90</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG/90</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG/90</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>49.9</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.8</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Aston Villa</td>\n",
       "      <td>48.1</td>\n",
       "      <td>15</td>\n",
       "      <td>1.5</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>...</td>\n",
       "      <td>9.7</td>\n",
       "      <td>0.97</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.80</td>\n",
       "      <td>17.7</td>\n",
       "      <td>1.77</td>\n",
       "      <td>170</td>\n",
       "      <td>314</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bournemouth</td>\n",
       "      <td>56.2</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>22</td>\n",
       "      <td>2.2</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>...</td>\n",
       "      <td>12.9</td>\n",
       "      <td>1.29</td>\n",
       "      <td>10.2</td>\n",
       "      <td>1.02</td>\n",
       "      <td>23.1</td>\n",
       "      <td>2.31</td>\n",
       "      <td>191</td>\n",
       "      <td>359</td>\n",
       "      <td>2.2</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Brentford</td>\n",
       "      <td>53.3</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>17</td>\n",
       "      <td>1.7</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>...</td>\n",
       "      <td>16.7</td>\n",
       "      <td>1.67</td>\n",
       "      <td>13.1</td>\n",
       "      <td>1.31</td>\n",
       "      <td>29.9</td>\n",
       "      <td>2.99</td>\n",
       "      <td>228</td>\n",
       "      <td>463</td>\n",
       "      <td>3.6</td>\n",
       "      <td>2.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Brighton</td>\n",
       "      <td>44.8</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>24</td>\n",
       "      <td>2.4</td>\n",
       "      <td>12</td>\n",
       "      <td>1.2</td>\n",
       "      <td>...</td>\n",
       "      <td>14.7</td>\n",
       "      <td>1.47</td>\n",
       "      <td>13.1</td>\n",
       "      <td>1.31</td>\n",
       "      <td>27.8</td>\n",
       "      <td>2.78</td>\n",
       "      <td>156</td>\n",
       "      <td>307</td>\n",
       "      <td>2.2</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Squad  Poss  Gls  Gls/90  Ast  Ast/90  G+A  G+A/90  npG  npG/90  ...  \\\n",
       "0      Arsenal  49.9   11     1.1    8     0.8   19     1.9   10     1.0  ...   \n",
       "1  Aston Villa  48.1   15     1.5   10     1.0   25     2.5   14     1.4  ...   \n",
       "2  Bournemouth  56.2   12     1.2   10     1.0   22     2.2   12     1.2  ...   \n",
       "3    Brentford  53.3   19     1.9   17     1.7   36     3.6   19     1.9  ...   \n",
       "4     Brighton  44.8   14     1.4   10     1.0   24     2.4   12     1.2  ...   \n",
       "\n",
       "   npxG  npxG/90   xAG  xAG/90  npxG+xAG  npxG+xAG/90  PrgC  PrgP  G+A-PK  \\\n",
       "0   9.6     0.96   6.8    0.68      16.4         1.64   213   317     1.8   \n",
       "1   9.7     0.97   8.0    0.80      17.7         1.77   170   314     2.4   \n",
       "2  12.9     1.29  10.2    1.02      23.1         2.31   191   359     2.2   \n",
       "3  16.7     1.67  13.1    1.31      29.9         2.99   228   463     3.6   \n",
       "4  14.7     1.47  13.1    1.31      27.8         2.78   156   307     2.2   \n",
       "\n",
       "   xG+xAG  \n",
       "0    1.72  \n",
       "1    1.93  \n",
       "2    2.31  \n",
       "3    2.99  \n",
       "4    2.94  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def rename_columns_with_suffix(selected_against):\n",
    "    new_columns = []  \n",
    "    seen_columns = set()  \n",
    "    for col_index, column_name in enumerate(selected_against.columns):\n",
    "        if column_name in seen_columns:\n",
    "            new_column_name = f'{column_name}/90'\n",
    "        else:\n",
    "            new_column_name = column_name\n",
    "        new_columns.append(new_column_name) \n",
    "        seen_columns.add(column_name)  \n",
    "    selected_against.columns = new_columns  \n",
    "\n",
    "rename_columns_with_suffix(selected_against)\n",
    "\n",
    "selected_against.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "cf8dbad2-9b9c-4555-9353-5742db44cf26",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index: 0, Column Name: Squad\n",
      "Index: 1, Column Name: Poss\n",
      "Index: 2, Column Name: Gls\n",
      "Index: 3, Column Name: Gls/90\n",
      "Index: 4, Column Name: Ast\n",
      "Index: 5, Column Name: Ast/90\n",
      "Index: 6, Column Name: G+A\n",
      "Index: 7, Column Name: G+A/90\n",
      "Index: 8, Column Name: npG\n",
      "Index: 9, Column Name: npG/90\n",
      "Index: 10, Column Name: PK\n",
      "Index: 11, Column Name: PKatt\n",
      "Index: 12, Column Name: CrdY\n",
      "Index: 13, Column Name: CrdR\n",
      "Index: 14, Column Name: xG\n",
      "Index: 15, Column Name: xG/90\n",
      "Index: 16, Column Name: npxG\n",
      "Index: 17, Column Name: npxG/90\n",
      "Index: 18, Column Name: xAG\n",
      "Index: 19, Column Name: xAG/90\n",
      "Index: 20, Column Name: npxG+xAG\n",
      "Index: 21, Column Name: npxG+xAG/90\n",
      "Index: 22, Column Name: PrgC\n",
      "Index: 23, Column Name: PrgP\n",
      "Index: 24, Column Name: G+A-PK\n",
      "Index: 25, Column Name: xG+xAG\n"
     ]
    }
   ],
   "source": [
    "for index, column_name in enumerate(selected_for.columns):\n",
    "    print(f\"Index: {index}, Column Name: {column_name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "d2d1c1e3-e71a-441a-9665-c246508088f3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index: 0, Column Name: Squad\n",
      "Index: 1, Column Name: Poss\n",
      "Index: 2, Column Name: Gls\n",
      "Index: 3, Column Name: Gls/90\n",
      "Index: 4, Column Name: Ast\n",
      "Index: 5, Column Name: Ast/90\n",
      "Index: 6, Column Name: G+A\n",
      "Index: 7, Column Name: G+A/90\n",
      "Index: 8, Column Name: npG\n",
      "Index: 9, Column Name: npG/90\n",
      "Index: 10, Column Name: PK\n",
      "Index: 11, Column Name: PKatt\n",
      "Index: 12, Column Name: CrdY\n",
      "Index: 13, Column Name: CrdR\n",
      "Index: 14, Column Name: xG\n",
      "Index: 15, Column Name: xG/90\n",
      "Index: 16, Column Name: npxG\n",
      "Index: 17, Column Name: npxG/90\n",
      "Index: 18, Column Name: xAG\n",
      "Index: 19, Column Name: xAG/90\n",
      "Index: 20, Column Name: npxG+xAG\n",
      "Index: 21, Column Name: npxG+xAG/90\n",
      "Index: 22, Column Name: PrgC\n",
      "Index: 23, Column Name: PrgP\n",
      "Index: 24, Column Name: G+A-PK\n",
      "Index: 25, Column Name: xG+xAG\n"
     ]
    }
   ],
   "source": [
    "for index, column_name in enumerate(selected_against.columns):\n",
    "    print(f\"Index: {index}, Column Name: {column_name}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "2d487f09-d7b7-463b-98eb-556d1b3f68bd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls/90</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast/90</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A/90</th>\n",
       "      <th>npG</th>\n",
       "      <th>npG/90</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG/90</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG/90</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG/90</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>...</td>\n",
       "      <td>15.5</td>\n",
       "      <td>1.55</td>\n",
       "      <td>11.7</td>\n",
       "      <td>1.17</td>\n",
       "      <td>27.2</td>\n",
       "      <td>2.72</td>\n",
       "      <td>192</td>\n",
       "      <td>413</td>\n",
       "      <td>2.9</td>\n",
       "      <td>2.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Squad  Poss  Gls  Gls/90  Ast  Ast/90  G+A  G+A/90  npG  npG/90  ...  \\\n",
       "0  Arsenal  50.1   16     1.6   13     1.3   29     2.9   16     1.6  ...   \n",
       "\n",
       "   npxG  npxG/90   xAG  xAG/90  npxG+xAG  npxG+xAG/90  PrgC  PrgP  G+A-PK  \\\n",
       "0  15.5     1.55  11.7    1.17      27.2         2.72   192   413     2.9   \n",
       "\n",
       "   xG+xAG  \n",
       "0    2.72  \n",
       "\n",
       "[1 rows x 26 columns]"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_for.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "fda00255-7be2-4b2c-b086-c181b9a7cbe7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Poss</th>\n",
       "      <th>Gls</th>\n",
       "      <th>Gls/90</th>\n",
       "      <th>Ast</th>\n",
       "      <th>Ast/90</th>\n",
       "      <th>G+A</th>\n",
       "      <th>G+A/90</th>\n",
       "      <th>npG</th>\n",
       "      <th>npG/90</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG</th>\n",
       "      <th>npxG/90</th>\n",
       "      <th>xAG</th>\n",
       "      <th>xAG/90</th>\n",
       "      <th>npxG+xAG</th>\n",
       "      <th>npxG+xAG/90</th>\n",
       "      <th>PrgC</th>\n",
       "      <th>PrgP</th>\n",
       "      <th>G+A-PK</th>\n",
       "      <th>xG+xAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>49.9</td>\n",
       "      <td>11</td>\n",
       "      <td>1.1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.8</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows Ã— 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Squad  Poss  Gls  Gls/90  Ast  Ast/90  G+A  G+A/90  npG  npG/90  ...  \\\n",
       "0  Arsenal  49.9   11     1.1    8     0.8   19     1.9   10     1.0  ...   \n",
       "\n",
       "   npxG  npxG/90  xAG  xAG/90  npxG+xAG  npxG+xAG/90  PrgC  PrgP  G+A-PK  \\\n",
       "0   9.6     0.96  6.8    0.68      16.4         1.64   213   317     1.8   \n",
       "\n",
       "   xG+xAG  \n",
       "0    1.72  \n",
       "\n",
       "[1 rows x 26 columns]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_against.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "d5d15775-650d-4ead-b381-63c0122ebe63",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rk</th>\n",
       "      <th>Squad</th>\n",
       "      <th>MP</th>\n",
       "      <th>W</th>\n",
       "      <th>D</th>\n",
       "      <th>L</th>\n",
       "      <th>GF</th>\n",
       "      <th>GA</th>\n",
       "      <th>GD</th>\n",
       "      <th>Pts</th>\n",
       "      <th>Pts/MP</th>\n",
       "      <th>xG</th>\n",
       "      <th>xGA</th>\n",
       "      <th>xGD</th>\n",
       "      <th>xGD/90</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Liverpool</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>6</td>\n",
       "      <td>13</td>\n",
       "      <td>25</td>\n",
       "      <td>2.5</td>\n",
       "      <td>18.1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Rk      Squad  MP  W  D  L  GF  GA  GD  Pts  Pts/MP    xG  xGA   xGD  \\\n",
       "0   1  Liverpool  10  8  1  1  19   6  13   25     2.5  18.1  8.0  10.0   \n",
       "\n",
       "   xGD/90  \n",
       "0     1.0  "
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_table.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "14131e30-f327-405d-83bf-abf4feeed684",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Pts/MP</th>\n",
       "      <th>Pts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Liverpool</td>\n",
       "      <td>2.5</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Squad  Pts/MP  Pts\n",
       "0  Liverpool     2.5   25"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "table_pts_mp = selected_table[['Squad','Pts/MP','Pts']]\n",
    "table_pts_mp.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "34664890",
   "metadata": {},
   "outputs": [],
   "source": [
    "against_copy = selected_against.copy()\n",
    "for_copy = selected_for.copy()\n",
    "table_copy = table_pts_mp.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "8ecec725",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Poss_x          -0.083027\n",
      "Gls_x            0.185383\n",
      "Gls/90_x         0.185383\n",
      "Ast_x            0.292866\n",
      "Ast/90_x         0.292866\n",
      "G+A_x            0.243398\n",
      "G+A/90_x         0.243398\n",
      "npG_x            0.206581\n",
      "npG/90_x         0.206581\n",
      "PK_x            -0.109823\n",
      "PKatt_x         -0.131293\n",
      "CrdY_x          -0.186953\n",
      "CrdR_x           0.022050\n",
      "xG_x             0.091492\n",
      "xG/90_x          0.091492\n",
      "npxG_x           0.124191\n",
      "npxG/90_x        0.124191\n",
      "xAG_x            0.121683\n",
      "xAG/90_x         0.121683\n",
      "npxG+xAG_x       0.123548\n",
      "npxG+xAG/90_x    0.123548\n",
      "PrgC_x          -0.090676\n",
      "PrgP_x           0.024683\n",
      "G+A-PK_x         0.254295\n",
      "xG+xAG_x         0.106397\n",
      "Poss_y           0.083027\n",
      "Gls_y           -0.211675\n",
      "Gls/90_y        -0.211675\n",
      "Ast_y           -0.266442\n",
      "Ast/90_y        -0.266442\n",
      "G+A_y           -0.241622\n",
      "G+A/90_y        -0.241622\n",
      "npG_y           -0.232440\n",
      "npG/90_y        -0.232440\n",
      "PK_y             0.066694\n",
      "PKatt_y          0.181395\n",
      "CrdY_y           0.254192\n",
      "CrdR_y           0.088094\n",
      "xG_y            -0.265969\n",
      "xG/90_y         -0.265969\n",
      "npxG_y          -0.311295\n",
      "npxG/90_y       -0.311295\n",
      "xAG_y           -0.395122\n",
      "xAG/90_y        -0.395122\n",
      "npxG+xAG_y      -0.350293\n",
      "npxG+xAG/90_y   -0.350293\n",
      "PrgC_y          -0.213941\n",
      "PrgP_y          -0.220324\n",
      "G+A-PK_y        -0.251801\n",
      "xG+xAG_y        -0.325667\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "merged_stats = pd.merge(selected_for, selected_against, on ='Squad')\n",
    "\n",
    "numeric_columns_merged = merged_stats.select_dtypes(include=['float64', 'int64'])\n",
    "\n",
    "corr_merged_pts_mp = numeric_columns_merged.corrwith(table_pts_mp['Pts/MP'])\n",
    "\n",
    "print(corr_merged_pts_mp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "74b87c73",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "f3f8808e",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_df = pd.merge(table_pts_mp, merged_stats, on='Squad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "0e693e87",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Pts/MP</th>\n",
       "      <th>Pts</th>\n",
       "      <th>Poss_x</th>\n",
       "      <th>Gls_x</th>\n",
       "      <th>Gls/90_x</th>\n",
       "      <th>Ast_x</th>\n",
       "      <th>Ast/90_x</th>\n",
       "      <th>G+A_x</th>\n",
       "      <th>G+A/90_x</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG_y</th>\n",
       "      <th>npxG/90_y</th>\n",
       "      <th>xAG_y</th>\n",
       "      <th>xAG/90_y</th>\n",
       "      <th>npxG+xAG_y</th>\n",
       "      <th>npxG+xAG/90_y</th>\n",
       "      <th>PrgC_y</th>\n",
       "      <th>PrgP_y</th>\n",
       "      <th>G+A-PK_y</th>\n",
       "      <th>xG+xAG_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Liverpool</td>\n",
       "      <td>2.5</td>\n",
       "      <td>25</td>\n",
       "      <td>56.7</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>35</td>\n",
       "      <td>3.5</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.80</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.67</td>\n",
       "      <td>14.7</td>\n",
       "      <td>1.47</td>\n",
       "      <td>154</td>\n",
       "      <td>326</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Manchester City</td>\n",
       "      <td>2.3</td>\n",
       "      <td>23</td>\n",
       "      <td>64.3</td>\n",
       "      <td>21</td>\n",
       "      <td>2.1</td>\n",
       "      <td>15</td>\n",
       "      <td>1.5</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>8.4</td>\n",
       "      <td>0.84</td>\n",
       "      <td>18.4</td>\n",
       "      <td>1.84</td>\n",
       "      <td>133</td>\n",
       "      <td>210</td>\n",
       "      <td>1.7</td>\n",
       "      <td>1.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Nott'ham Forest</td>\n",
       "      <td>1.9</td>\n",
       "      <td>19</td>\n",
       "      <td>41.9</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>7</td>\n",
       "      <td>0.7</td>\n",
       "      <td>21</td>\n",
       "      <td>2.1</td>\n",
       "      <td>...</td>\n",
       "      <td>8.7</td>\n",
       "      <td>0.87</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.67</td>\n",
       "      <td>15.4</td>\n",
       "      <td>1.54</td>\n",
       "      <td>258</td>\n",
       "      <td>490</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chelsea</td>\n",
       "      <td>1.8</td>\n",
       "      <td>18</td>\n",
       "      <td>55.0</td>\n",
       "      <td>20</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>...</td>\n",
       "      <td>11.2</td>\n",
       "      <td>1.12</td>\n",
       "      <td>8.5</td>\n",
       "      <td>0.85</td>\n",
       "      <td>19.6</td>\n",
       "      <td>1.96</td>\n",
       "      <td>178</td>\n",
       "      <td>357</td>\n",
       "      <td>1.7</td>\n",
       "      <td>2.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>1.8</td>\n",
       "      <td>18</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 53 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Squad  Pts/MP  Pts  Poss_x  Gls_x  Gls/90_x  Ast_x  Ast/90_x  \\\n",
       "0        Liverpool     2.5   25    56.7     19       1.9     16       1.6   \n",
       "1  Manchester City     2.3   23    64.3     21       2.1     15       1.5   \n",
       "2  Nott'ham Forest     1.9   19    41.9     14       1.4      7       0.7   \n",
       "3          Chelsea     1.8   18    55.0     20       2.0     16       1.6   \n",
       "4          Arsenal     1.8   18    50.1     16       1.6     13       1.3   \n",
       "\n",
       "   G+A_x  G+A/90_x  ...  npxG_y  npxG/90_y  xAG_y  xAG/90_y  npxG+xAG_y  \\\n",
       "0     35       3.5  ...     8.0       0.80    6.7      0.67        14.7   \n",
       "1     36       3.6  ...    10.0       1.00    8.4      0.84        18.4   \n",
       "2     21       2.1  ...     8.7       0.87    6.7      0.67        15.4   \n",
       "3     36       3.6  ...    11.2       1.12    8.5      0.85        19.6   \n",
       "4     29       2.9  ...     9.6       0.96    6.8      0.68        16.4   \n",
       "\n",
       "   npxG+xAG/90_y  PrgC_y  PrgP_y  G+A-PK_y  xG+xAG_y  \n",
       "0           1.47     154     326       1.1      1.47  \n",
       "1           1.84     133     210       1.7      1.92  \n",
       "2           1.54     258     490       1.0      1.62  \n",
       "3           1.96     178     357       1.7      2.20  \n",
       "4           1.64     213     317       1.8      1.72  \n",
       "\n",
       "[5 rows x 53 columns]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "83d96a8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,6))\n",
    "plt.scatter(merged_df['xG_y'], merged_df['xG_x'])\n",
    "\n",
    "offset = 0.75\n",
    "for i, row in merged_df.iterrows():\n",
    "    plt.text(row['xG_y'] + offset, row['xG_x'], row['Squad'], fontsize = 7)\n",
    "\n",
    "plt.title('xG Created vs. xG Against')\n",
    "plt.xlabel('xG Against')\n",
    "plt.ylabel('xG Created')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "33815348",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Pts/MP</th>\n",
       "      <th>Pts</th>\n",
       "      <th>Poss_x</th>\n",
       "      <th>Gls_x</th>\n",
       "      <th>Gls/90_x</th>\n",
       "      <th>Ast_x</th>\n",
       "      <th>Ast/90_x</th>\n",
       "      <th>G+A_x</th>\n",
       "      <th>G+A/90_x</th>\n",
       "      <th>...</th>\n",
       "      <th>npxG/90_y</th>\n",
       "      <th>xAG_y</th>\n",
       "      <th>xAG/90_y</th>\n",
       "      <th>npxG+xAG_y</th>\n",
       "      <th>npxG+xAG/90_y</th>\n",
       "      <th>PrgC_y</th>\n",
       "      <th>PrgP_y</th>\n",
       "      <th>G+A-PK_y</th>\n",
       "      <th>xG+xAG_y</th>\n",
       "      <th>xGD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Liverpool</td>\n",
       "      <td>2.5</td>\n",
       "      <td>25</td>\n",
       "      <td>56.7</td>\n",
       "      <td>19</td>\n",
       "      <td>1.9</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>35</td>\n",
       "      <td>3.5</td>\n",
       "      <td>...</td>\n",
       "      <td>0.80</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.67</td>\n",
       "      <td>14.7</td>\n",
       "      <td>1.47</td>\n",
       "      <td>154</td>\n",
       "      <td>326</td>\n",
       "      <td>1.1</td>\n",
       "      <td>1.47</td>\n",
       "      <td>10.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Manchester City</td>\n",
       "      <td>2.3</td>\n",
       "      <td>23</td>\n",
       "      <td>64.3</td>\n",
       "      <td>21</td>\n",
       "      <td>2.1</td>\n",
       "      <td>15</td>\n",
       "      <td>1.5</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>8.4</td>\n",
       "      <td>0.84</td>\n",
       "      <td>18.4</td>\n",
       "      <td>1.84</td>\n",
       "      <td>133</td>\n",
       "      <td>210</td>\n",
       "      <td>1.7</td>\n",
       "      <td>1.92</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Nott'ham Forest</td>\n",
       "      <td>1.9</td>\n",
       "      <td>19</td>\n",
       "      <td>41.9</td>\n",
       "      <td>14</td>\n",
       "      <td>1.4</td>\n",
       "      <td>7</td>\n",
       "      <td>0.7</td>\n",
       "      <td>21</td>\n",
       "      <td>2.1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.87</td>\n",
       "      <td>6.7</td>\n",
       "      <td>0.67</td>\n",
       "      <td>15.4</td>\n",
       "      <td>1.54</td>\n",
       "      <td>258</td>\n",
       "      <td>490</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.62</td>\n",
       "      <td>4.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chelsea</td>\n",
       "      <td>1.8</td>\n",
       "      <td>18</td>\n",
       "      <td>55.0</td>\n",
       "      <td>20</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6</td>\n",
       "      <td>...</td>\n",
       "      <td>1.12</td>\n",
       "      <td>8.5</td>\n",
       "      <td>0.85</td>\n",
       "      <td>19.6</td>\n",
       "      <td>1.96</td>\n",
       "      <td>178</td>\n",
       "      <td>357</td>\n",
       "      <td>1.7</td>\n",
       "      <td>2.20</td>\n",
       "      <td>4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>1.8</td>\n",
       "      <td>18</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>1.3</td>\n",
       "      <td>29</td>\n",
       "      <td>2.9</td>\n",
       "      <td>...</td>\n",
       "      <td>0.96</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>16.4</td>\n",
       "      <td>1.64</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1.72</td>\n",
       "      <td>5.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 54 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Squad  Pts/MP  Pts  Poss_x  Gls_x  Gls/90_x  Ast_x  Ast/90_x  \\\n",
       "0        Liverpool     2.5   25    56.7     19       1.9     16       1.6   \n",
       "1  Manchester City     2.3   23    64.3     21       2.1     15       1.5   \n",
       "2  Nott'ham Forest     1.9   19    41.9     14       1.4      7       0.7   \n",
       "3          Chelsea     1.8   18    55.0     20       2.0     16       1.6   \n",
       "4          Arsenal     1.8   18    50.1     16       1.6     13       1.3   \n",
       "\n",
       "   G+A_x  G+A/90_x  ...  npxG/90_y  xAG_y  xAG/90_y  npxG+xAG_y  \\\n",
       "0     35       3.5  ...       0.80    6.7      0.67        14.7   \n",
       "1     36       3.6  ...       1.00    8.4      0.84        18.4   \n",
       "2     21       2.1  ...       0.87    6.7      0.67        15.4   \n",
       "3     36       3.6  ...       1.12    8.5      0.85        19.6   \n",
       "4     29       2.9  ...       0.96    6.8      0.68        16.4   \n",
       "\n",
       "   npxG+xAG/90_y  PrgC_y  PrgP_y  G+A-PK_y  xG+xAG_y   xGD  \n",
       "0           1.47     154     326       1.1      1.47  10.1  \n",
       "1           1.84     133     210       1.7      1.92   9.1  \n",
       "2           1.54     258     490       1.0      1.62   4.1  \n",
       "3           1.96     178     357       1.7      2.20   4.6  \n",
       "4           1.64     213     317       1.8      1.72   5.1  \n",
       "\n",
       "[5 rows x 54 columns]"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df['xGD'] = merged_df['xG_x'] - merged_df['xG_y']\n",
    "merged_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "19801eb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,6))\n",
    "plt.scatter(merged_df['xGD'], merged_df['Pts/MP'])\n",
    "\n",
    "offset = 0.75\n",
    "for i, row in merged_df.iterrows():\n",
    "    plt.text(row['xGD'] + offset, row['Pts/MP'], row['Squad'], fontsize = 7)\n",
    "\n",
    "plt.title('Points Per Match vs. xG Difference')\n",
    "plt.xlabel('xG Difference')\n",
    "plt.ylabel('Points Per Match')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "bbc2fe8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', 'Pts/MP', 'Pts', 'Poss_x', 'Gls_x', 'Gls/90_x', 'Ast_x',\n",
       "       'Ast/90_x', 'G+A_x', 'G+A/90_x', 'npG_x', 'npG/90_x', 'PK_x', 'PKatt_x',\n",
       "       'CrdY_x', 'CrdR_x', 'xG_x', 'xG/90_x', 'npxG_x', 'npxG/90_x', 'xAG_x',\n",
       "       'xAG/90_x', 'npxG+xAG_x', 'npxG+xAG/90_x', 'PrgC_x', 'PrgP_x',\n",
       "       'G+A-PK_x', 'xG+xAG_x', 'Poss_y', 'Gls_y', 'Gls/90_y', 'Ast_y',\n",
       "       'Ast/90_y', 'G+A_y', 'G+A/90_y', 'npG_y', 'npG/90_y', 'PK_y', 'PKatt_y',\n",
       "       'CrdY_y', 'CrdR_y', 'xG_y', 'xG/90_y', 'npxG_y', 'npxG/90_y', 'xAG_y',\n",
       "       'xAG/90_y', 'npxG+xAG_y', 'npxG+xAG/90_y', 'PrgC_y', 'PrgP_y',\n",
       "       'G+A-PK_y', 'xG+xAG_y', 'xGD'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "6d530394",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', 'Pts/MP', 'Pts', 'Poss_x', 'Gls_x', 'Gls/90_x', 'Ast_x',\n",
       "       'npG_x', 'npG/90_x', 'PK_x', 'PKatt_x', 'CrdY_x', 'CrdR_x', 'xG_x',\n",
       "       'xG/90_x', 'npxG_x', 'npxG/90_x', 'PrgC_x', 'PrgP_x', 'Poss_y', 'Gls_y',\n",
       "       'Gls/90_y', 'npG_y', 'npG/90_y', 'PK_y', 'PKatt_y', 'CrdY_y', 'CrdR_y',\n",
       "       'xG_y', 'xG/90_y', 'npxG_y', 'npxG/90_y', 'PrgC_y', 'PrgP_y', 'xGD'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns_to_drop = ['Ast/90_x', 'G+A_x', 'G+A/90_x', 'xAG_x', 'xAG/90_x', 'npxG+xAG_x', 'npxG+xAG/90_x', 'G+A-PK_x',\n",
    "                  'xG+xAG_x', 'Ast/90_y', 'Ast_y', 'G+A_y', 'G+A/90_y', 'xAG_y', 'xAG/90_y', 'npxG+xAG_y', 'npxG+xAG/90_y', 'G+A-PK_y',\n",
    "                  'xG+xAG_y']\n",
    "\n",
    "merged_df = merged_df.drop(columns=columns_to_drop)\n",
    "\n",
    "merged_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "22cf6b47",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Squad', 'Points Per Match', 'Points', 'Possession For', 'Goals For',\n",
       "       'Goals Per 90', 'Assists', 'Non-Penalty Goals',\n",
       "       'Non-Penalty Goals Per 90', 'Penalties For', 'Penalties Won',\n",
       "       'Yellow Cards', 'Red Cards', 'Expected Goals', 'Expected Goals Per 90',\n",
       "       'Non-Penalty Expected Goals', 'Non-Penalty Expected Goals Per 90',\n",
       "       'Progressive Carries', 'Progressive Passes', 'Possession Against',\n",
       "       'Goals Conceded', 'Goals Conceded Per 90', 'Non-Penalty Goals Conceded',\n",
       "       'Non-Penalty Goals Conceded Per 90', 'Penalties Scored Against',\n",
       "       'Penalties Conceded', 'Yellow Cards Against', 'Red Cards Against',\n",
       "       'Expected Goals Against', 'Expected Goals Against Per 90',\n",
       "       'Non-Penalty Expected Goals Against',\n",
       "       'Non-Penalty Expected Goals Against Per 90',\n",
       "       'Progressive Carries Against', 'Progressive Passes Against',\n",
       "       'Expected Goal Difference'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rename_dict = {\n",
    "    'Pts/MP': 'Points Per Match',\n",
    "    'Poss_x': 'Possession For',\n",
    "    'Gls_x': 'Goals For',\n",
    "    'Gls/90_x': 'Goals Per 90',\n",
    "    'Ast_x': 'Assists',\n",
    "    'npG_x': 'Non-Penalty Goals',\n",
    "    'npG/90_x': 'Non-Penalty Goals Per 90',\n",
    "    'PK_x': 'Penalties For',\n",
    "    'PKatt_x': 'Penalties Won',\n",
    "    'CrdY_x': 'Yellow Cards',\n",
    "    'CrdR_x': 'Red Cards',\n",
    "    'xG_x': 'Expected Goals',\n",
    "    'xG/90_x': 'Expected Goals Per 90',\n",
    "    'npxG_x': 'Non-Penalty Expected Goals',\n",
    "    'npxG/90_x': 'Non-Penalty Expected Goals Per 90',\n",
    "    'PrgC_x': 'Progressive Carries',\n",
    "    'PrgP_x': 'Progressive Passes',\n",
    "    'Poss_y': 'Possession Against',\n",
    "    'Gls_y': 'Goals Conceded',\n",
    "    'Gls/90_y': 'Goals Conceded Per 90',\n",
    "    'npG_y': 'Non-Penalty Goals Conceded',\n",
    "    'npG/90_y': 'Non-Penalty Goals Conceded Per 90',\n",
    "    'PK_y': 'Penalties Scored Against',\n",
    "    'PKatt_y': 'Penalties Conceded',\n",
    "    'CrdY_y': 'Yellow Cards Against',\n",
    "    'CrdR_y': 'Red Cards Against',\n",
    "    'xG_y': 'Expected Goals Against',\n",
    "    'xG/90_y': 'Expected Goals Against Per 90',\n",
    "    'npxG_y': 'Non-Penalty Expected Goals Against',\n",
    "    'npxG/90_y': 'Non-Penalty Expected Goals Against Per 90',\n",
    "    'PrgC_y': 'Progressive Carries Against',\n",
    "    'PrgP_y': 'Progressive Passes Against',\n",
    "    'Pts': 'Points',\n",
    "    'xGD': 'Expected Goal Difference'\n",
    "}\n",
    "\n",
    "merged_df = merged_df.rename(columns=rename_dict)\n",
    "\n",
    "merged_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "cd26a602",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Squad                                         object\n",
       "Points Per Match                             float64\n",
       "Points                                         int64\n",
       "Possession For                               float64\n",
       "Goals For                                      int64\n",
       "Goals Per 90                                 float64\n",
       "Assists                                        int64\n",
       "Non-Penalty Goals                              int64\n",
       "Non-Penalty Goals Per 90                     float64\n",
       "Penalties For                                  int64\n",
       "Penalties Won                                  int64\n",
       "Yellow Cards                                   int64\n",
       "Red Cards                                      int64\n",
       "Expected Goals                               float64\n",
       "Expected Goals Per 90                        float64\n",
       "Non-Penalty Expected Goals                   float64\n",
       "Non-Penalty Expected Goals Per 90            float64\n",
       "Progressive Carries                            int64\n",
       "Progressive Passes                             int64\n",
       "Possession Against                           float64\n",
       "Goals Conceded                                 int64\n",
       "Goals Conceded Per 90                        float64\n",
       "Non-Penalty Goals Conceded                     int64\n",
       "Non-Penalty Goals Conceded Per 90            float64\n",
       "Penalties Scored Against                       int64\n",
       "Penalties Conceded                             int64\n",
       "Yellow Cards Against                           int64\n",
       "Red Cards Against                              int64\n",
       "Expected Goals Against                       float64\n",
       "Expected Goals Against Per 90                float64\n",
       "Non-Penalty Expected Goals Against           float64\n",
       "Non-Penalty Expected Goals Against Per 90    float64\n",
       "Progressive Carries Against                    int64\n",
       "Progressive Passes Against                     int64\n",
       "Expected Goal Difference                     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "7372db33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Squad                                         object\n",
       "Points Per Match                             float64\n",
       "Points                                         int64\n",
       "Possession For                               float64\n",
       "Goals For                                    float64\n",
       "Goals Per 90                                 float64\n",
       "Assists                                        int64\n",
       "Non-Penalty Goals                            float64\n",
       "Non-Penalty Goals Per 90                     float64\n",
       "Penalties For                                  int64\n",
       "Penalties Won                                  int64\n",
       "Yellow Cards                                   int64\n",
       "Red Cards                                      int64\n",
       "Expected Goals                               float64\n",
       "Expected Goals Per 90                        float64\n",
       "Non-Penalty Expected Goals                   float64\n",
       "Non-Penalty Expected Goals Per 90            float64\n",
       "Progressive Carries                            int64\n",
       "Progressive Passes                             int64\n",
       "Possession Against                           float64\n",
       "Goals Conceded                               float64\n",
       "Goals Conceded Per 90                        float64\n",
       "Non-Penalty Goals Conceded                   float64\n",
       "Non-Penalty Goals Conceded Per 90            float64\n",
       "Penalties Scored Against                       int64\n",
       "Penalties Conceded                             int64\n",
       "Yellow Cards Against                           int64\n",
       "Red Cards Against                              int64\n",
       "Expected Goals Against                       float64\n",
       "Expected Goals Against Per 90                float64\n",
       "Non-Penalty Expected Goals Against           float64\n",
       "Non-Penalty Expected Goals Against Per 90    float64\n",
       "Progressive Carries Against                    int64\n",
       "Progressive Passes Against                     int64\n",
       "Expected Goal Difference                     float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df['Goals For'] = merged_df['Goals For'].astype('float64')\n",
    "merged_df['Non-Penalty Goals'] = merged_df['Non-Penalty Goals'].astype('float64')\n",
    "merged_df['Goals Conceded'] = merged_df['Goals Conceded'].astype('float64')\n",
    "merged_df['Non-Penalty Goals Conceded'] = merged_df['Non-Penalty Goals Conceded'].astype('float64')\n",
    "merged_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "617ecae1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Points Per Match</th>\n",
       "      <th>Points</th>\n",
       "      <th>Possession For</th>\n",
       "      <th>Goals For</th>\n",
       "      <th>Goals Per 90</th>\n",
       "      <th>Assists</th>\n",
       "      <th>Non-Penalty Goals</th>\n",
       "      <th>Non-Penalty Goals Per 90</th>\n",
       "      <th>Penalties For</th>\n",
       "      <th>...</th>\n",
       "      <th>Non-Penalty Expected Goals Against</th>\n",
       "      <th>Non-Penalty Expected Goals Against Per 90</th>\n",
       "      <th>Progressive Carries Against</th>\n",
       "      <th>Progressive Passes Against</th>\n",
       "      <th>Expected Goal Difference</th>\n",
       "      <th>xG Performance</th>\n",
       "      <th>Non-Penalty xG Performance</th>\n",
       "      <th>Non-Penalty xG Difference</th>\n",
       "      <th>xG Performance Against (Goals Conceded - Expected Goals Against)</th>\n",
       "      <th>Non-Penalty xG Performance Against (Non-Penalty Goals Conceded - Non-Penalty Expected Goals Against)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Liverpool</td>\n",
       "      <td>2.5</td>\n",
       "      <td>25</td>\n",
       "      <td>56.7</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>16</td>\n",
       "      <td>17.0</td>\n",
       "      <td>1.7</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.80</td>\n",
       "      <td>154</td>\n",
       "      <td>326</td>\n",
       "      <td>10.1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>-2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Manchester City</td>\n",
       "      <td>2.3</td>\n",
       "      <td>23</td>\n",
       "      <td>64.3</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.1</td>\n",
       "      <td>15</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.00</td>\n",
       "      <td>133</td>\n",
       "      <td>210</td>\n",
       "      <td>9.1</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>9.1</td>\n",
       "      <td>-0.8</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Nott'ham Forest</td>\n",
       "      <td>1.9</td>\n",
       "      <td>19</td>\n",
       "      <td>41.9</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>7</td>\n",
       "      <td>13.0</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>8.7</td>\n",
       "      <td>0.87</td>\n",
       "      <td>258</td>\n",
       "      <td>490</td>\n",
       "      <td>4.1</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>4.1</td>\n",
       "      <td>-2.5</td>\n",
       "      <td>-2.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chelsea</td>\n",
       "      <td>1.8</td>\n",
       "      <td>18</td>\n",
       "      <td>55.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>11.2</td>\n",
       "      <td>1.12</td>\n",
       "      <td>178</td>\n",
       "      <td>357</td>\n",
       "      <td>4.6</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1.7</td>\n",
       "      <td>6.1</td>\n",
       "      <td>-1.5</td>\n",
       "      <td>-1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>1.8</td>\n",
       "      <td>18</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>9.6</td>\n",
       "      <td>0.96</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>5.1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>5.9</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Squad  Points Per Match  Points  Possession For  Goals For  \\\n",
       "0        Liverpool               2.5      25            56.7       19.0   \n",
       "1  Manchester City               2.3      23            64.3       21.0   \n",
       "2  Nott'ham Forest               1.9      19            41.9       14.0   \n",
       "3          Chelsea               1.8      18            55.0       20.0   \n",
       "4          Arsenal               1.8      18            50.1       16.0   \n",
       "\n",
       "   Goals Per 90  Assists  Non-Penalty Goals  Non-Penalty Goals Per 90  \\\n",
       "0           1.9       16               17.0                       1.7   \n",
       "1           2.1       15               20.0                       2.0   \n",
       "2           1.4        7               13.0                       1.3   \n",
       "3           2.0       16               19.0                       1.9   \n",
       "4           1.6       13               16.0                       1.6   \n",
       "\n",
       "   Penalties For  ...  Non-Penalty Expected Goals Against  \\\n",
       "0              2  ...                                 8.0   \n",
       "1              1  ...                                10.0   \n",
       "2              1  ...                                 8.7   \n",
       "3              1  ...                                11.2   \n",
       "4              0  ...                                 9.6   \n",
       "\n",
       "   Non-Penalty Expected Goals Against Per 90  Progressive Carries Against  \\\n",
       "0                                       0.80                          154   \n",
       "1                                       1.00                          133   \n",
       "2                                       0.87                          258   \n",
       "3                                       1.12                          178   \n",
       "4                                       0.96                          213   \n",
       "\n",
       "   Progressive Passes Against  Expected Goal Difference  xG Performance  \\\n",
       "0                         326                      10.1             0.9   \n",
       "1                         210                       9.1             1.1   \n",
       "2                         490                       4.1             0.4   \n",
       "3                         357                       4.6             1.9   \n",
       "4                         317                       5.1             0.5   \n",
       "\n",
       "   Non-Penalty xG Performance  Non-Penalty xG Difference  \\\n",
       "0                         0.5                        8.5   \n",
       "1                         0.9                        9.1   \n",
       "2                         0.2                        4.1   \n",
       "3                         1.7                        6.1   \n",
       "4                         0.5                        5.9   \n",
       "\n",
       "   xG Performance Against (Goals Conceded - Expected Goals Against)  \\\n",
       "0                                               -2.0                  \n",
       "1                                               -0.8                  \n",
       "2                                               -2.5                  \n",
       "3                                               -1.5                  \n",
       "4                                                0.6                  \n",
       "\n",
       "   Non-Penalty xG Performance Against (Non-Penalty Goals Conceded - Non-Penalty Expected Goals Against)  \n",
       "0                                               -2.0                                                     \n",
       "1                                               -1.0                                                     \n",
       "2                                               -2.7                                                     \n",
       "3                                               -1.2                                                     \n",
       "4                                                0.4                                                     \n",
       "\n",
       "[5 rows x 40 columns]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df['xG Performance'] = merged_df['Goals For'] - merged_df['Expected Goals']\n",
    "merged_df['Non-Penalty xG Performance'] = merged_df['Non-Penalty Goals'] - merged_df['Non-Penalty Expected Goals']\n",
    "merged_df['Non-Penalty xG Difference'] = merged_df['Non-Penalty Expected Goals'] - merged_df['Non-Penalty Expected Goals Against']\n",
    "merged_df['xG Performance Against (Goals Conceded - Expected Goals Against)'] = merged_df['Goals Conceded'] - merged_df['Expected Goals Against']\n",
    "merged_df['Non-Penalty xG Performance Against (Non-Penalty Goals Conceded - Non-Penalty Expected Goals Against)'] = merged_df['Non-Penalty Goals Conceded'] - merged_df['Non-Penalty Expected Goals Against']\n",
    "merged_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "b7fe26b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Squad</th>\n",
       "      <th>Points Per Match</th>\n",
       "      <th>Points</th>\n",
       "      <th>Possession For</th>\n",
       "      <th>Goals For</th>\n",
       "      <th>Goals Per 90</th>\n",
       "      <th>Assists</th>\n",
       "      <th>Non-Penalty Goals</th>\n",
       "      <th>Non-Penalty Goals Per 90</th>\n",
       "      <th>Penalties For</th>\n",
       "      <th>...</th>\n",
       "      <th>Non-Penalty Expected Goals Against Per 90</th>\n",
       "      <th>Progressive Carries Against</th>\n",
       "      <th>Progressive Passes Against</th>\n",
       "      <th>Expected Goal Difference</th>\n",
       "      <th>xG Performance</th>\n",
       "      <th>Non-Penalty xG Performance</th>\n",
       "      <th>Non-Penalty xG Difference</th>\n",
       "      <th>xG Performance Against (Goals Conceded - Expected Goals Against)</th>\n",
       "      <th>Non-Penalty xG Performance Against (Non-Penalty Goals Conceded - Non-Penalty Expected Goals Against)</th>\n",
       "      <th>League Position</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Liverpool</td>\n",
       "      <td>2.5</td>\n",
       "      <td>25</td>\n",
       "      <td>56.7</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>16</td>\n",
       "      <td>17.0</td>\n",
       "      <td>1.7</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0.80</td>\n",
       "      <td>154</td>\n",
       "      <td>326</td>\n",
       "      <td>10.1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.5</td>\n",
       "      <td>8.5</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Manchester City</td>\n",
       "      <td>2.3</td>\n",
       "      <td>23</td>\n",
       "      <td>64.3</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.1</td>\n",
       "      <td>15</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.00</td>\n",
       "      <td>133</td>\n",
       "      <td>210</td>\n",
       "      <td>9.1</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.9</td>\n",
       "      <td>9.1</td>\n",
       "      <td>-0.8</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Nott'ham Forest</td>\n",
       "      <td>1.9</td>\n",
       "      <td>19</td>\n",
       "      <td>41.9</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>7</td>\n",
       "      <td>13.0</td>\n",
       "      <td>1.3</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0.87</td>\n",
       "      <td>258</td>\n",
       "      <td>490</td>\n",
       "      <td>4.1</td>\n",
       "      <td>0.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>4.1</td>\n",
       "      <td>-2.5</td>\n",
       "      <td>-2.7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chelsea</td>\n",
       "      <td>1.8</td>\n",
       "      <td>18</td>\n",
       "      <td>55.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1.12</td>\n",
       "      <td>178</td>\n",
       "      <td>357</td>\n",
       "      <td>4.6</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1.7</td>\n",
       "      <td>6.1</td>\n",
       "      <td>-1.5</td>\n",
       "      <td>-1.2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Arsenal</td>\n",
       "      <td>1.8</td>\n",
       "      <td>18</td>\n",
       "      <td>50.1</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>13</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.96</td>\n",
       "      <td>213</td>\n",
       "      <td>317</td>\n",
       "      <td>5.1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>5.9</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Squad  Points Per Match  Points  Possession For  Goals For  \\\n",
       "0        Liverpool               2.5      25            56.7       19.0   \n",
       "1  Manchester City               2.3      23            64.3       21.0   \n",
       "2  Nott'ham Forest               1.9      19            41.9       14.0   \n",
       "3          Chelsea               1.8      18            55.0       20.0   \n",
       "4          Arsenal               1.8      18            50.1       16.0   \n",
       "\n",
       "   Goals Per 90  Assists  Non-Penalty Goals  Non-Penalty Goals Per 90  \\\n",
       "0           1.9       16               17.0                       1.7   \n",
       "1           2.1       15               20.0                       2.0   \n",
       "2           1.4        7               13.0                       1.3   \n",
       "3           2.0       16               19.0                       1.9   \n",
       "4           1.6       13               16.0                       1.6   \n",
       "\n",
       "   Penalties For  ...  Non-Penalty Expected Goals Against Per 90  \\\n",
       "0              2  ...                                       0.80   \n",
       "1              1  ...                                       1.00   \n",
       "2              1  ...                                       0.87   \n",
       "3              1  ...                                       1.12   \n",
       "4              0  ...                                       0.96   \n",
       "\n",
       "   Progressive Carries Against  Progressive Passes Against  \\\n",
       "0                          154                         326   \n",
       "1                          133                         210   \n",
       "2                          258                         490   \n",
       "3                          178                         357   \n",
       "4                          213                         317   \n",
       "\n",
       "   Expected Goal Difference  xG Performance  Non-Penalty xG Performance  \\\n",
       "0                      10.1             0.9                         0.5   \n",
       "1                       9.1             1.1                         0.9   \n",
       "2                       4.1             0.4                         0.2   \n",
       "3                       4.6             1.9                         1.7   \n",
       "4                       5.1             0.5                         0.5   \n",
       "\n",
       "   Non-Penalty xG Difference  \\\n",
       "0                        8.5   \n",
       "1                        9.1   \n",
       "2                        4.1   \n",
       "3                        6.1   \n",
       "4                        5.9   \n",
       "\n",
       "   xG Performance Against (Goals Conceded - Expected Goals Against)  \\\n",
       "0                                               -2.0                  \n",
       "1                                               -0.8                  \n",
       "2                                               -2.5                  \n",
       "3                                               -1.5                  \n",
       "4                                                0.6                  \n",
       "\n",
       "   Non-Penalty xG Performance Against (Non-Penalty Goals Conceded - Non-Penalty Expected Goals Against)  \\\n",
       "0                                               -2.0                                                      \n",
       "1                                               -1.0                                                      \n",
       "2                                               -2.7                                                      \n",
       "3                                               -1.2                                                      \n",
       "4                                                0.4                                                      \n",
       "\n",
       "   League Position  \n",
       "0                1  \n",
       "1                2  \n",
       "2                3  \n",
       "3                4  \n",
       "4                5  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df['League Position'] = merged_df.index + 1\n",
    "\n",
    "merged_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "85151c00",
   "metadata": {},
   "outputs": [],
   "source": [
    "import dash\n",
    "from dash import html, dcc\n",
    "from dash.dependencies import Input, Output\n",
    "import plotly.express as px"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "424349b8",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x15d2e9a50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "app = dash.Dash(__name__)\n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.H1('Premier League Statistical Comparison'),\n",
    "    dcc.Dropdown(\n",
    "        id='x-axis-dropdown',\n",
    "        options=[{'label': col, 'value': col} for col in merged_df.columns if col != 'Squad'],\n",
    "        value='Expected Goal Difference',  \n",
    "        clearable=False,\n",
    "        style={\"width\": \"50%\"}\n",
    "    ),\n",
    "    dcc.Dropdown(\n",
    "        id='y-axis-dropdown',\n",
    "        options=[{'label': col, 'value': col} for col in merged_df.columns if col != 'Squad'],\n",
    "        value='League Position',  \n",
    "        clearable=False,\n",
    "        style={\"width\": \"50%\"}\n",
    "    ),\n",
    "    dcc.Graph(id='scatter-plot')\n",
    "])\n",
    "\n",
    "@app.callback(\n",
    "    Output('scatter-plot', 'figure'),\n",
    "    [Input('x-axis-dropdown', 'value'),\n",
    "     Input('y-axis-dropdown', 'value')]\n",
    ")\n",
    "def update_graph(x_axis, y_axis):\n",
    "    fig = px.scatter(merged_df, x=x_axis, y=y_axis)\n",
    "                    \n",
    "    \n",
    "\n",
    "    fig.update_traces(marker=dict(size=12, line=dict(width=2, color='DarkSlateGrey')))\n",
    "\n",
    "    for i, row in merged_df.iterrows():\n",
    "        fig.add_annotation(\n",
    "            x=row[x_axis],\n",
    "            y=row[y_axis],\n",
    "            text=row['Squad'],\n",
    "            showarrow=False,\n",
    "            yshift=20,\n",
    "            xshift = 20 \n",
    "        )\n",
    "\n",
    "    fig.update_layout(\n",
    "        title=f'{y_axis} vs. {x_axis} - Premier League Teams',\n",
    "        xaxis_title=x_axis,\n",
    "        yaxis_title=y_axis,\n",
    "        legend_title='Points',\n",
    "        autosize=True\n",
    "    )\n",
    "\n",
    "    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightPink')\n",
    "    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightPink')\n",
    "\n",
    "    return fig\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc401a5a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
