{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dc3f3f35",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "# Individual Player Statistics - Premier League"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "67aa0d98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: selenium in ./anaconda3/lib/python3.11/site-packages (4.25.0)\n",
      "Requirement already satisfied: urllib3[socks]<3,>=1.26 in ./anaconda3/lib/python3.11/site-packages (from selenium) (1.26.16)\n",
      "Requirement already satisfied: trio~=0.17 in ./anaconda3/lib/python3.11/site-packages (from selenium) (0.26.2)\n",
      "Requirement already satisfied: trio-websocket~=0.9 in ./anaconda3/lib/python3.11/site-packages (from selenium) (0.11.1)\n",
      "Requirement already satisfied: certifi>=2021.10.8 in ./anaconda3/lib/python3.11/site-packages (from selenium) (2024.8.30)\n",
      "Requirement already satisfied: typing_extensions~=4.9 in ./anaconda3/lib/python3.11/site-packages (from selenium) (4.12.2)\n",
      "Requirement already satisfied: websocket-client~=1.8 in ./anaconda3/lib/python3.11/site-packages (from selenium) (1.8.0)\n",
      "Requirement already satisfied: attrs>=23.2.0 in ./anaconda3/lib/python3.11/site-packages (from trio~=0.17->selenium) (24.2.0)\n",
      "Requirement already satisfied: sortedcontainers in ./anaconda3/lib/python3.11/site-packages (from trio~=0.17->selenium) (2.4.0)\n",
      "Requirement already satisfied: idna in ./anaconda3/lib/python3.11/site-packages (from trio~=0.17->selenium) (3.4)\n",
      "Requirement already satisfied: outcome in ./anaconda3/lib/python3.11/site-packages (from trio~=0.17->selenium) (1.3.0.post0)\n",
      "Requirement already satisfied: sniffio>=1.3.0 in ./anaconda3/lib/python3.11/site-packages (from trio~=0.17->selenium) (1.3.1)\n",
      "Requirement already satisfied: wsproto>=0.14 in ./anaconda3/lib/python3.11/site-packages (from trio-websocket~=0.9->selenium) (1.2.0)\n",
      "Requirement already satisfied: PySocks!=1.5.7,<2.0,>=1.5.6 in ./anaconda3/lib/python3.11/site-packages (from urllib3[socks]<3,>=1.26->selenium) (1.7.1)\n",
      "Requirement already satisfied: h11<1,>=0.9.0 in ./anaconda3/lib/python3.11/site-packages (from wsproto>=0.14->trio-websocket~=0.9->selenium) (0.14.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install selenium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4069f3a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: webdriver_manager in ./anaconda3/lib/python3.11/site-packages (4.0.2)\n",
      "Requirement already satisfied: requests in ./anaconda3/lib/python3.11/site-packages (from webdriver_manager) (2.31.0)\n",
      "Requirement already satisfied: python-dotenv in ./anaconda3/lib/python3.11/site-packages (from webdriver_manager) (0.21.0)\n",
      "Requirement already satisfied: packaging in ./anaconda3/lib/python3.11/site-packages (from webdriver_manager) (23.1)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in ./anaconda3/lib/python3.11/site-packages (from requests->webdriver_manager) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in ./anaconda3/lib/python3.11/site-packages (from requests->webdriver_manager) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in ./anaconda3/lib/python3.11/site-packages (from requests->webdriver_manager) (1.26.16)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in ./anaconda3/lib/python3.11/site-packages (from requests->webdriver_manager) (2024.8.30)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install webdriver_manager"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fbe28432",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Unnamed: 0_level_0 Unnamed: 1_level_0 Unnamed: 2_level_0 Unnamed: 3_level_0  \\\n",
      "                  Rk             Player             Nation                Pos   \n",
      "0                  1        Tyler Adams             us USA                 MF   \n",
      "1                  2   Tosin Adarabioyo            eng ENG                 DF   \n",
      "2                  3      Simon Adingra             ci CIV              FW,MF   \n",
      "3                  4     Asher Agbinone            eng ENG                 MF   \n",
      "4                  5           Ola Aina             ng NGA                 DF   \n",
      "\n",
      "  Unnamed: 4_level_0 Unnamed: 5_level_0 Unnamed: 6_level_0 Playing Time  \\\n",
      "               Squad                Age               Born           MP   \n",
      "0        Bournemouth             25-269               1999            2   \n",
      "1            Chelsea             27-046               1997            4   \n",
      "2           Brighton             22-313               2002            6   \n",
      "3     Crystal Palace             19-042               2005            1   \n",
      "4    Nott'ham Forest             28-032               1996           10   \n",
      "\n",
      "               ... Per 90 Minutes                                              \\\n",
      "  Starts  Min  ...            Ast   G+A  G-PK G+A-PK    xG   xAG xG+xAG  npxG   \n",
      "0      0   35  ...           0.00  0.00  0.00   0.00  0.00  0.24   0.24  0.00   \n",
      "1      2  173  ...           0.00  0.00  0.00   0.00  0.00  0.01   0.01  0.00   \n",
      "2      1  141  ...           0.64  1.28  0.64   1.28  0.21  0.31   0.52  0.21   \n",
      "3      0    3  ...           0.00  0.00  0.00   0.00  0.58  1.00   1.58  0.58   \n",
      "4     10  861  ...           0.00  0.10  0.10   0.10  0.01  0.04   0.05  0.01   \n",
      "\n",
      "           Unnamed: 36_level_0  \n",
      "  npxG+xAG             Matches  \n",
      "0     0.24             Matches  \n",
      "1     0.01             Matches  \n",
      "2     0.52             Matches  \n",
      "3     1.58             Matches  \n",
      "4     0.05             Matches  \n",
      "\n",
      "[5 rows x 37 columns]\n"
     ]
    }
   ],
   "source": [
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "from selenium.webdriver.chrome.options import Options\n",
    "import pandas as pd\n",
    "from webdriver_manager.chrome import ChromeDriverManager\n",
    "\n",
    "options = Options()\n",
    "options.headless = True\n",
    "\n",
    "service = Service(ChromeDriverManager().install())\n",
    "driver = webdriver.Chrome(service=service, options=options)\n",
    "\n",
    "url = \"https://fbref.com/en/comps/9/stats/Premier-League-Stats\"\n",
    "driver.get(url)\n",
    "\n",
    "driver.implicitly_wait(10)\n",
    "\n",
    "df = pd.read_html(driver.page_source, attrs={'id': 'stats_standard'})[0]\n",
    "print(df.head())\n",
    "\n",
    "driver.quit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8cba3ec6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MultiIndex([( 'Unnamed: 0_level_0',       'Rk'),\n",
      "            ( 'Unnamed: 1_level_0',   'Player'),\n",
      "            ( 'Unnamed: 2_level_0',   'Nation'),\n",
      "            ( 'Unnamed: 3_level_0',      'Pos'),\n",
      "            ( 'Unnamed: 4_level_0',    'Squad'),\n",
      "            ( 'Unnamed: 5_level_0',      'Age'),\n",
      "            ( 'Unnamed: 6_level_0',     'Born'),\n",
      "            (       'Playing Time',       'MP'),\n",
      "            (       'Playing Time',   'Starts'),\n",
      "            (       'Playing Time',      'Min'),\n",
      "            (       'Playing Time',      '90s'),\n",
      "            (        'Performance',      'Gls'),\n",
      "            (        'Performance',      'Ast'),\n",
      "            (        'Performance',      'G+A'),\n",
      "            (        'Performance',     'G-PK'),\n",
      "            (        'Performance',       'PK'),\n",
      "            (        'Performance',    'PKatt'),\n",
      "            (        'Performance',     'CrdY'),\n",
      "            (        'Performance',     'CrdR'),\n",
      "            (           'Expected',       'xG'),\n",
      "            (           'Expected',     'npxG'),\n",
      "            (           'Expected',      'xAG'),\n",
      "            (           'Expected', 'npxG+xAG'),\n",
      "            (        'Progression',     'PrgC'),\n",
      "            (        'Progression',     'PrgP'),\n",
      "            (        'Progression',     'PrgR'),\n",
      "            (     'Per 90 Minutes',      'Gls'),\n",
      "            (     'Per 90 Minutes',      'Ast'),\n",
      "            (     'Per 90 Minutes',      'G+A'),\n",
      "            (     'Per 90 Minutes',     'G-PK'),\n",
      "            (     'Per 90 Minutes',   'G+A-PK'),\n",
      "            (     'Per 90 Minutes',       'xG'),\n",
      "            (     'Per 90 Minutes',      'xAG'),\n",
      "            (     'Per 90 Minutes',   'xG+xAG'),\n",
      "            (     'Per 90 Minutes',     'npxG'),\n",
      "            (     'Per 90 Minutes', 'npxG+xAG'),\n",
      "            ('Unnamed: 36_level_0',  'Matches')],\n",
      "           )\n"
     ]
    }
   ],
   "source": [
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ac2266c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unnamed: 0_level_0   Rk          object\n",
      "Unnamed: 1_level_0   Player      object\n",
      "Unnamed: 2_level_0   Nation      object\n",
      "Unnamed: 3_level_0   Pos         object\n",
      "Unnamed: 4_level_0   Squad       object\n",
      "Unnamed: 5_level_0   Age         object\n",
      "Unnamed: 6_level_0   Born        object\n",
      "Playing Time         MP          object\n",
      "                     Starts      object\n",
      "                     Min         object\n",
      "                     90s         object\n",
      "Performance          Gls         object\n",
      "                     Ast         object\n",
      "                     G+A         object\n",
      "                     G-PK        object\n",
      "                     PK          object\n",
      "                     PKatt       object\n",
      "                     CrdY        object\n",
      "                     CrdR        object\n",
      "Expected             xG          object\n",
      "                     npxG        object\n",
      "                     xAG         object\n",
      "                     npxG+xAG    object\n",
      "Progression          PrgC        object\n",
      "                     PrgP        object\n",
      "                     PrgR        object\n",
      "Per 90 Minutes       Gls         object\n",
      "                     Ast         object\n",
      "                     G+A         object\n",
      "                     G-PK        object\n",
      "                     G+A-PK      object\n",
      "                     xG          object\n",
      "                     xAG         object\n",
      "                     xG+xAG      object\n",
      "                     npxG        object\n",
      "                     npxG+xAG    object\n",
      "Unnamed: 36_level_0  Matches     object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b3914c8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Player', 'Playing Time MP', 'Playing Time Starts', 'Playing Time Min',\n",
      "       'Playing Time 90s', 'Performance Gls', 'Performance Ast',\n",
      "       'Performance G+A', 'Performance G-PK', 'Performance PK',\n",
      "       'Performance PKatt', 'Performance CrdY', 'Performance CrdR',\n",
      "       'Expected xG', 'Expected npxG', 'Expected xAG', 'Expected npxG+xAG',\n",
      "       'Progression PrgC', 'Progression PrgP', 'Progression PrgR',\n",
      "       'Per 90 Minutes Gls', 'Per 90 Minutes Ast', 'Per 90 Minutes G+A',\n",
      "       'Per 90 Minutes G-PK', 'Per 90 Minutes G+A-PK', 'Per 90 Minutes xG',\n",
      "       'Per 90 Minutes xAG', 'Per 90 Minutes xG+xAG', 'Per 90 Minutes npxG',\n",
      "       'Per 90 Minutes npxG+xAG'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "df.columns = [' '.join(col).strip() if isinstance(col, tuple) else col for col in df.columns]\n",
    "\n",
    "df.rename(columns={\n",
    "    'Unnamed: 0_level_0 Rk': 'Rk',\n",
    "    'Unnamed: 1_level_0 Player': 'Player',\n",
    "    'Unnamed: 2_level_0 Nation': 'Nation',\n",
    "    'Unnamed: 3_level_0 Pos': 'Pos',\n",
    "    'Unnamed: 4_level_0 Squad': 'Squad',\n",
    "    'Unnamed: 5_level_0 Age': 'Age',\n",
    "    'Unnamed: 6_level_0 Born': 'Born',\n",
    "    'Unnamed: 36_level_0 Matches': 'Matches'\n",
    "}, inplace=True)\n",
    "\n",
    "df.drop(columns=['Rk', 'Nation', 'Pos', 'Squad', 'Born', 'Matches', 'Age'], inplace=True)\n",
    "\n",
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1f316040",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Player', 'Playing Time MP', 'Playing Time Starts', 'Playing Time Min',\n",
      "       'Playing Time 90s', 'Performance Gls', 'Performance Ast',\n",
      "       'Performance G+A', 'Performance G-PK', 'Performance PK',\n",
      "       'Performance PKatt', 'Performance CrdY', 'Performance CrdR',\n",
      "       'Expected xG', 'Expected npxG', 'Expected xAG', 'Expected npxG+xAG',\n",
      "       'Progression PrgC', 'Progression PrgP', 'Progression PrgR',\n",
      "       'Per 90 Minutes Gls', 'Per 90 Minutes Ast', 'Per 90 Minutes G+A',\n",
      "       'Per 90 Minutes G-PK', 'Per 90 Minutes G+A-PK', 'Per 90 Minutes xG',\n",
      "       'Per 90 Minutes xAG', 'Per 90 Minutes xG+xAG', 'Per 90 Minutes npxG',\n",
      "       'Per 90 Minutes npxG+xAG'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "df.columns = ['_'.join(filter(None, col)).strip() if isinstance(col, tuple) else col for col in df.columns]\n",
    "\n",
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "142d4248",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Player', 'Matches Played', 'Games Started', 'Total Minutes',\n",
      "       '90s Completed', 'Goals', 'Assists', 'Goals plus Assists',\n",
      "       'Open Play Goals', 'Penalties Scored', 'Penalties Attempted',\n",
      "       'Yellow Cards', 'Red Cards', 'Expected Goals',\n",
      "       'Non-Penalty Expected Goals', 'Expected Assists',\n",
      "       'Non-Penalty Expected Goals + Assists', 'Progressive Carries',\n",
      "       'Progressive Passes', 'Progressive Passes Received', 'Goals per 90',\n",
      "       'Assists per 90', 'Goals + Assists per 90', 'Open Play Goals per 90',\n",
      "       'Open Play Goals + Assists per 90', 'Expected Goals per 90',\n",
      "       'Expected Assists per 90', 'Expected Goals + Assists per 90',\n",
      "       'Non-Penalty Expected Goals per 90',\n",
      "       'Non-Penalty Expected Goals + Assists per 90'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "df.rename(columns={\n",
    "    'Playing Time MP': 'Matches Played',\n",
    "    'Playing Time Starts': 'Games Started',\n",
    "    'Playing Time Min': 'Total Minutes',\n",
    "    'Playing Time 90s': '90s Completed',\n",
    "    'Performance Gls': 'Goals',\n",
    "    'Performance Ast': 'Assists',\n",
    "    'Performance G+A': 'Goals plus Assists',\n",
    "    'Performance G-PK': 'Open Play Goals',\n",
    "    'Performance PK': 'Penalties Scored',\n",
    "    'Performance PKatt': 'Penalties Attempted',\n",
    "    'Performance CrdY': 'Yellow Cards',\n",
    "    'Performance CrdR': 'Red Cards',\n",
    "    'Expected xG': 'Expected Goals',\n",
    "    'Expected npxG': 'Non-Penalty Expected Goals',\n",
    "    'Expected xAG': 'Expected Assists',\n",
    "    'Expected npxG+xAG': 'Non-Penalty Expected Goals + Assists',\n",
    "    'Progression PrgC': 'Progressive Carries',\n",
    "    'Progression PrgP': 'Progressive Passes',\n",
    "    'Progression PrgR': 'Progressive Passes Received',\n",
    "    'Per 90 Minutes Gls': 'Goals per 90',\n",
    "    'Per 90 Minutes Ast': 'Assists per 90',\n",
    "    'Per 90 Minutes G+A': 'Goals + Assists per 90',\n",
    "    'Per 90 Minutes G-PK': 'Open Play Goals per 90',\n",
    "    'Per 90 Minutes G+A-PK': 'Open Play Goals + Assists per 90',\n",
    "    'Per 90 Minutes xG': 'Expected Goals per 90',\n",
    "    'Per 90 Minutes xAG': 'Expected Assists per 90',\n",
    "    'Per 90 Minutes xG+xAG': 'Expected Goals + Assists per 90',\n",
    "    'Per 90 Minutes npxG': 'Non-Penalty Expected Goals per 90',\n",
    "    'Per 90 Minutes npxG+xAG': 'Non-Penalty Expected Goals + Assists per 90'\n",
    "}, inplace=True)\n",
    "\n",
    "print(df.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c1672d5d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Player                                         object\n",
      "Matches Played                                 object\n",
      "Games Started                                  object\n",
      "Total Minutes                                  object\n",
      "90s Completed                                  object\n",
      "Goals                                          object\n",
      "Assists                                        object\n",
      "Goals plus Assists                             object\n",
      "Open Play Goals                                object\n",
      "Penalties Scored                               object\n",
      "Penalties Attempted                            object\n",
      "Yellow Cards                                   object\n",
      "Red Cards                                      object\n",
      "Expected Goals                                 object\n",
      "Non-Penalty Expected Goals                     object\n",
      "Expected Assists                               object\n",
      "Non-Penalty Expected Goals + Assists           object\n",
      "Progressive Carries                            object\n",
      "Progressive Passes                             object\n",
      "Progressive Passes Received                    object\n",
      "Goals per 90                                   object\n",
      "Assists per 90                                 object\n",
      "Goals + Assists per 90                         object\n",
      "Open Play Goals per 90                         object\n",
      "Open Play Goals + Assists per 90               object\n",
      "Expected Goals per 90                          object\n",
      "Expected Assists per 90                        object\n",
      "Expected Goals + Assists per 90                object\n",
      "Non-Penalty Expected Goals per 90              object\n",
      "Non-Penalty Expected Goals + Assists per 90    object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "00a61ae9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Player                                          object\n",
      "Matches Played                                   int64\n",
      "Games Started                                    int64\n",
      "Total Minutes                                    int64\n",
      "90s Completed                                    int64\n",
      "Goals                                            int64\n",
      "Assists                                          int64\n",
      "Goals plus Assists                               int64\n",
      "Open Play Goals                                  int64\n",
      "Penalties Scored                                 int64\n",
      "Penalties Attempted                              int64\n",
      "Yellow Cards                                     int64\n",
      "Red Cards                                        int64\n",
      "Expected Goals                                 float64\n",
      "Non-Penalty Expected Goals                     float64\n",
      "Expected Assists                               float64\n",
      "Non-Penalty Expected Goals + Assists           float64\n",
      "Progressive Carries                              int64\n",
      "Progressive Passes                               int64\n",
      "Progressive Passes Received                      int64\n",
      "Goals per 90                                   float64\n",
      "Assists per 90                                 float64\n",
      "Goals + Assists per 90                         float64\n",
      "Open Play Goals per 90                         float64\n",
      "Open Play Goals + Assists per 90               float64\n",
      "Expected Goals per 90                          float64\n",
      "Expected Assists per 90                        float64\n",
      "Expected Goals + Assists per 90                float64\n",
      "Non-Penalty Expected Goals per 90              float64\n",
      "Non-Penalty Expected Goals + Assists per 90    float64\n",
      "dtype: object\n",
      "                  Player  Matches Played  Games Started  Total Minutes  \\\n",
      "0            Tyler Adams               2              0             35   \n",
      "1       Tosin Adarabioyo               4              2            173   \n",
      "2          Simon Adingra               6              1            141   \n",
      "3         Asher Agbinone               1              0              3   \n",
      "4               Ola Aina              10             10            861   \n",
      "..                   ...             ...            ...            ...   \n",
      "468         Ashley Young               8              8            695   \n",
      "469       Illia Zabarnyi              10             10            900   \n",
      "470  Oleksandr Zinchenko               3              1            109   \n",
      "471       Joshua Zirkzee              10              4            418   \n",
      "472      Martin Ødegaard               3              3            253   \n",
      "\n",
      "     90s Completed  Goals  Assists  Goals plus Assists  Open Play Goals  \\\n",
      "0                0      0        0                   0                0   \n",
      "1                1      0        0                   0                0   \n",
      "2                1      1        1                   2                1   \n",
      "3                0      0        0                   0                0   \n",
      "4                9      1        0                   1                1   \n",
      "..             ...    ...      ...                 ...              ...   \n",
      "468              7      0        3                   3                0   \n",
      "469             10      0        0                   0                0   \n",
      "470              1      0        0                   0                0   \n",
      "471              4      1        1                   2                1   \n",
      "472              2      0        0                   0                0   \n",
      "\n",
      "     Penalties Scored  ...  Goals per 90  Assists per 90  \\\n",
      "0                   0  ...          0.00            0.00   \n",
      "1                   0  ...          0.00            0.00   \n",
      "2                   0  ...          0.64            0.64   \n",
      "3                   0  ...          0.00            0.00   \n",
      "4                   0  ...          0.10            0.00   \n",
      "..                ...  ...           ...             ...   \n",
      "468                 0  ...          0.00            0.39   \n",
      "469                 0  ...          0.00            0.00   \n",
      "470                 0  ...          0.00            0.00   \n",
      "471                 0  ...          0.22            0.22   \n",
      "472                 0  ...          0.00            0.00   \n",
      "\n",
      "     Goals + Assists per 90  Open Play Goals per 90  \\\n",
      "0                      0.00                    0.00   \n",
      "1                      0.00                    0.00   \n",
      "2                      1.28                    0.64   \n",
      "3                      0.00                    0.00   \n",
      "4                      0.10                    0.10   \n",
      "..                      ...                     ...   \n",
      "468                    0.39                    0.00   \n",
      "469                    0.00                    0.00   \n",
      "470                    0.00                    0.00   \n",
      "471                    0.43                    0.22   \n",
      "472                    0.00                    0.00   \n",
      "\n",
      "     Open Play Goals + Assists per 90  Expected Goals per 90  \\\n",
      "0                                0.00                   0.00   \n",
      "1                                0.00                   0.00   \n",
      "2                                1.28                   0.21   \n",
      "3                                0.00                   0.58   \n",
      "4                                0.10                   0.01   \n",
      "..                                ...                    ...   \n",
      "468                              0.39                   0.01   \n",
      "469                              0.00                   0.03   \n",
      "470                              0.00                   0.00   \n",
      "471                              0.43                   0.56   \n",
      "472                              0.00                   0.16   \n",
      "\n",
      "     Expected Assists per 90  Expected Goals + Assists per 90  \\\n",
      "0                       0.24                             0.24   \n",
      "1                       0.01                             0.01   \n",
      "2                       0.31                             0.52   \n",
      "3                       1.00                             1.58   \n",
      "4                       0.04                             0.05   \n",
      "..                       ...                              ...   \n",
      "468                     0.11                             0.11   \n",
      "469                     0.01                             0.04   \n",
      "470                     0.00                             0.00   \n",
      "471                     0.13                             0.69   \n",
      "472                     0.10                             0.26   \n",
      "\n",
      "     Non-Penalty Expected Goals per 90  \\\n",
      "0                                 0.00   \n",
      "1                                 0.00   \n",
      "2                                 0.21   \n",
      "3                                 0.58   \n",
      "4                                 0.01   \n",
      "..                                 ...   \n",
      "468                               0.01   \n",
      "469                               0.03   \n",
      "470                               0.00   \n",
      "471                               0.56   \n",
      "472                               0.16   \n",
      "\n",
      "     Non-Penalty Expected Goals + Assists per 90  \n",
      "0                                           0.24  \n",
      "1                                           0.01  \n",
      "2                                           0.52  \n",
      "3                                           1.58  \n",
      "4                                           0.05  \n",
      "..                                           ...  \n",
      "468                                         0.11  \n",
      "469                                         0.04  \n",
      "470                                         0.00  \n",
      "471                                         0.69  \n",
      "472                                         0.26  \n",
      "\n",
      "[473 rows x 30 columns]\n"
     ]
    }
   ],
   "source": [
    "integer_columns = [\n",
    "    'Matches Played', 'Games Started', 'Total Minutes', '90s Completed',\n",
    "    'Goals', 'Assists', 'Goals plus Assists', 'Open Play Goals',\n",
    "    'Penalties Scored', 'Penalties Attempted', 'Yellow Cards', 'Red Cards',\n",
    "    'Progressive Carries', 'Progressive Passes', 'Progressive Passes Received'\n",
    "]\n",
    "\n",
    "float_columns = [\n",
    "    'Expected Goals', 'Non-Penalty Expected Goals', 'Expected Assists',\n",
    "    'Non-Penalty Expected Goals + Assists', 'Goals per 90', 'Assists per 90',\n",
    "    'Goals + Assists per 90', 'Open Play Goals per 90',\n",
    "    'Open Play Goals + Assists per 90', 'Expected Goals per 90',\n",
    "    'Expected Assists per 90', 'Expected Goals + Assists per 90',\n",
    "    'Non-Penalty Expected Goals per 90', 'Non-Penalty Expected Goals + Assists per 90'\n",
    "]\n",
    "\n",
    "for col in integer_columns:\n",
    "    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)\n",
    "\n",
    "for col in float_columns:\n",
    "    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0.0)\n",
    "\n",
    "print(df.dtypes)\n",
    "\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "97b07d93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                    Player  Matches Played  Games Started  Total Minutes  \\\n",
      "4                 Ola Aina              10             10            861   \n",
      "5          Rayan Aït-Nouri              10             10            833   \n",
      "6          Kristoffer Ajer               8              8            636   \n",
      "7            Manuel Akanji               9              9            781   \n",
      "10  Trent Alexander-Arnold              10             10            842   \n",
      "\n",
      "    90s Completed  Goals  Assists  Goals plus Assists  Open Play Goals  \\\n",
      "4               9      1        0                   1                1   \n",
      "5               9      3        2                   5                3   \n",
      "6               7      0        0                   0                0   \n",
      "7               8      0        0                   0                0   \n",
      "10              9      0        1                   1                0   \n",
      "\n",
      "    Penalties Scored  ...  Goals per 90  Assists per 90  \\\n",
      "4                  0  ...          0.10            0.00   \n",
      "5                  0  ...          0.32            0.22   \n",
      "6                  0  ...          0.00            0.00   \n",
      "7                  0  ...          0.00            0.00   \n",
      "10                 0  ...          0.00            0.11   \n",
      "\n",
      "    Goals + Assists per 90  Open Play Goals per 90  \\\n",
      "4                     0.10                    0.10   \n",
      "5                     0.54                    0.32   \n",
      "6                     0.00                    0.00   \n",
      "7                     0.00                    0.00   \n",
      "10                    0.11                    0.00   \n",
      "\n",
      "    Open Play Goals + Assists per 90  Expected Goals per 90  \\\n",
      "4                               0.10                   0.01   \n",
      "5                               0.54                   0.12   \n",
      "6                               0.00                   0.04   \n",
      "7                               0.00                   0.01   \n",
      "10                              0.11                   0.04   \n",
      "\n",
      "    Expected Assists per 90  Expected Goals + Assists per 90  \\\n",
      "4                      0.04                             0.05   \n",
      "5                      0.11                             0.23   \n",
      "6                      0.03                             0.07   \n",
      "7                      0.03                             0.04   \n",
      "10                     0.26                             0.30   \n",
      "\n",
      "    Non-Penalty Expected Goals per 90  \\\n",
      "4                                0.01   \n",
      "5                                0.12   \n",
      "6                                0.04   \n",
      "7                                0.01   \n",
      "10                               0.04   \n",
      "\n",
      "    Non-Penalty Expected Goals + Assists per 90  \n",
      "4                                          0.05  \n",
      "5                                          0.23  \n",
      "6                                          0.07  \n",
      "7                                          0.04  \n",
      "10                                         0.30  \n",
      "\n",
      "[5 rows x 30 columns]\n"
     ]
    }
   ],
   "source": [
    "filtered_df = df[df['Total Minutes'] > 400]\n",
    "print(filtered_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "22cb0af4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                    Player  Matches Played  Games Started  Total Minutes  \\\n",
      "4                 Ola Aina              10             10            861   \n",
      "5          Rayan Aït-Nouri              10             10            833   \n",
      "6          Kristoffer Ajer               8              8            636   \n",
      "7            Manuel Akanji               9              9            781   \n",
      "10  Trent Alexander-Arnold              10             10            842   \n",
      "\n",
      "    90s Completed  Goals  Assists  Goals plus Assists  Open Play Goals  \\\n",
      "4               9      1        0                   1                1   \n",
      "5               9      3        2                   5                3   \n",
      "6               7      0        0                   0                0   \n",
      "7               8      0        0                   0                0   \n",
      "10              9      0        1                   1                0   \n",
      "\n",
      "    Penalties Scored  ...  Assists per 90  Goals + Assists per 90  \\\n",
      "4                  0  ...            0.00                    0.10   \n",
      "5                  0  ...            0.22                    0.54   \n",
      "6                  0  ...            0.00                    0.00   \n",
      "7                  0  ...            0.00                    0.00   \n",
      "10                 0  ...            0.11                    0.11   \n",
      "\n",
      "    Open Play Goals per 90  Open Play Goals + Assists per 90  \\\n",
      "4                     0.10                              0.10   \n",
      "5                     0.32                              0.54   \n",
      "6                     0.00                              0.00   \n",
      "7                     0.00                              0.00   \n",
      "10                    0.00                              0.11   \n",
      "\n",
      "    Expected Goals per 90  Expected Assists per 90  \\\n",
      "4                    0.01                     0.04   \n",
      "5                    0.12                     0.11   \n",
      "6                    0.04                     0.03   \n",
      "7                    0.01                     0.03   \n",
      "10                   0.04                     0.26   \n",
      "\n",
      "    Expected Goals + Assists per 90  Non-Penalty Expected Goals per 90  \\\n",
      "4                              0.05                               0.01   \n",
      "5                              0.23                               0.12   \n",
      "6                              0.07                               0.04   \n",
      "7                              0.04                               0.01   \n",
      "10                             0.30                               0.04   \n",
      "\n",
      "    Non-Penalty Expected Goals + Assists per 90  npxG Performance  \n",
      "4                                          0.05               0.9  \n",
      "5                                          0.23               1.9  \n",
      "6                                          0.07              -0.3  \n",
      "7                                          0.04              -0.1  \n",
      "10                                         0.30              -0.4  \n",
      "\n",
      "[5 rows x 31 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/jp/3fktnqd5023f4kfkp0wgrq4w0000gn/T/ipykernel_4667/2669212264.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  filtered_df['npxG Performance'] = filtered_df['Open Play Goals'] - filtered_df['Non-Penalty Expected Goals']\n"
     ]
    }
   ],
   "source": [
    "filtered_df['npxG Performance'] = filtered_df['Open Play Goals'] - filtered_df['Non-Penalty Expected Goals']\n",
    "\n",
    "print(filtered_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3910544f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import dash\n",
    "from dash import html, dcc\n",
    "from dash.dependencies import Input, Output\n",
    "import plotly.express as px"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "85f22999",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x12a51ecd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "app = dash.Dash(__name__)\n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.H1('Premier League Player Statistics'),\n",
    "    dcc.Dropdown(\n",
    "        id='x-axis-dropdown',\n",
    "        options=[{'label': col, 'value': col} for col in filtered_df.columns if col != 'Player'],\n",
    "        value='Non-Penalty Expected Goals', \n",
    "        clearable=False,\n",
    "        style={\"width\": \"50%\"}\n",
    "    ),\n",
    "    dcc.Dropdown(\n",
    "        id='y-axis-dropdown',\n",
    "        options=[{'label': col, 'value': col} for col in filtered_df.columns if col != 'Player'],\n",
    "        value='Expected Assists', \n",
    "        clearable=False,\n",
    "        style={\"width\": \"50%\"}\n",
    "    ),\n",
    "    dcc.Graph(id='scatter-plot')\n",
    "])\n",
    "\n",
    "@app.callback(\n",
    "    Output('scatter-plot', 'figure'),\n",
    "    [Input('x-axis-dropdown', 'value'),\n",
    "     Input('y-axis-dropdown', 'value')]\n",
    ")\n",
    "def update_graph(x_axis, y_axis):\n",
    "    fig = px.scatter(filtered_df, x=x_axis, y=y_axis)\n",
    "                     \n",
    "    \n",
    "\n",
    "    fig.update_traces(marker=dict(size=12, line=dict(width=2, color='DarkSlateGrey')))\n",
    "\n",
    "    for i, row in filtered_df.iterrows():\n",
    "        fig.add_annotation(\n",
    "            x=row[x_axis],\n",
    "            y=row[y_axis],\n",
    "            text=row['Player'],\n",
    "            showarrow=False,\n",
    "            yshift=20,\n",
    "            xshift = 20 \n",
    "        )\n",
    "\n",
    "    fig.update_layout(\n",
    "        title=f'{y_axis} vs. {x_axis} - Premier League Players',\n",
    "        xaxis_title=x_axis,\n",
    "        yaxis_title=y_axis,\n",
    "        legend_title='Player',\n",
    "        autosize=True\n",
    "    )\n",
    "\n",
    "    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='LightPink')\n",
    "    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='LightPink')\n",
    "\n",
    "    return fig\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c54baeb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
